-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity x_order_fir is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    y_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_TVALID : OUT STD_LOGIC;
    y_TREADY : IN STD_LOGIC;
    y_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    x_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    x_TVALID : IN STD_LOGIC;
    x_TREADY : OUT STD_LOGIC;
    x_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    x_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of x_order_fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "x_order_fir,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=6,HLS_SYN_FF=1457,HLS_SYN_LUT=1710,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal y_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal y_data_1_vld_in : STD_LOGIC;
    signal y_data_1_vld_out : STD_LOGIC;
    signal y_data_1_ack_in : STD_LOGIC;
    signal y_data_1_ack_out : STD_LOGIC;
    signal y_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal y_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal y_data_1_sel_rd : STD_LOGIC := '0';
    signal y_data_1_sel_wr : STD_LOGIC := '0';
    signal y_data_1_sel : STD_LOGIC;
    signal y_data_1_load_A : STD_LOGIC;
    signal y_data_1_load_B : STD_LOGIC;
    signal y_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal y_data_1_state_cmp_full : STD_LOGIC;
    signal y_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal y_user_V_1_vld_in : STD_LOGIC;
    signal y_user_V_1_vld_out : STD_LOGIC;
    signal y_user_V_1_ack_in : STD_LOGIC;
    signal y_user_V_1_ack_out : STD_LOGIC;
    signal y_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal y_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal y_user_V_1_sel_rd : STD_LOGIC := '0';
    signal y_user_V_1_sel_wr : STD_LOGIC := '0';
    signal y_user_V_1_sel : STD_LOGIC;
    signal y_user_V_1_load_A : STD_LOGIC;
    signal y_user_V_1_load_B : STD_LOGIC;
    signal y_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal y_user_V_1_state_cmp_full : STD_LOGIC;
    signal y_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal y_last_V_1_vld_in : STD_LOGIC;
    signal y_last_V_1_vld_out : STD_LOGIC;
    signal y_last_V_1_ack_in : STD_LOGIC;
    signal y_last_V_1_ack_out : STD_LOGIC;
    signal y_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal y_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal y_last_V_1_sel_rd : STD_LOGIC := '0';
    signal y_last_V_1_sel_wr : STD_LOGIC := '0';
    signal y_last_V_1_sel : STD_LOGIC;
    signal y_last_V_1_load_A : STD_LOGIC;
    signal y_last_V_1_load_B : STD_LOGIC;
    signal y_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal y_last_V_1_state_cmp_full : STD_LOGIC;
    signal x_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal x_data_0_vld_in : STD_LOGIC;
    signal x_data_0_vld_out : STD_LOGIC;
    signal x_data_0_ack_in : STD_LOGIC;
    signal x_data_0_ack_out : STD_LOGIC;
    signal x_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal x_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal x_data_0_sel_rd : STD_LOGIC := '0';
    signal x_data_0_sel_wr : STD_LOGIC := '0';
    signal x_data_0_sel : STD_LOGIC;
    signal x_data_0_load_A : STD_LOGIC;
    signal x_data_0_load_B : STD_LOGIC;
    signal x_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal x_data_0_state_cmp_full : STD_LOGIC;
    signal x_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal x_user_V_0_vld_in : STD_LOGIC;
    signal x_user_V_0_vld_out : STD_LOGIC;
    signal x_user_V_0_ack_in : STD_LOGIC;
    signal x_user_V_0_ack_out : STD_LOGIC;
    signal x_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal x_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal x_user_V_0_sel_rd : STD_LOGIC := '0';
    signal x_user_V_0_sel_wr : STD_LOGIC := '0';
    signal x_user_V_0_sel : STD_LOGIC;
    signal x_user_V_0_load_A : STD_LOGIC;
    signal x_user_V_0_load_B : STD_LOGIC;
    signal x_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal x_user_V_0_state_cmp_full : STD_LOGIC;
    signal x_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal x_last_V_0_vld_in : STD_LOGIC;
    signal x_last_V_0_vld_out : STD_LOGIC;
    signal x_last_V_0_ack_in : STD_LOGIC;
    signal x_last_V_0_ack_out : STD_LOGIC;
    signal x_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal x_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal x_last_V_0_sel_rd : STD_LOGIC := '0';
    signal x_last_V_0_sel_wr : STD_LOGIC := '0';
    signal x_last_V_0_sel : STD_LOGIC;
    signal x_last_V_0_load_A : STD_LOGIC;
    signal x_last_V_0_load_B : STD_LOGIC;
    signal x_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal x_last_V_0_state_cmp_full : STD_LOGIC;
    signal coe : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal coef_ce0 : STD_LOGIC;
    signal coef_we0 : STD_LOGIC;
    signal coef_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond1_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal x_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal reload_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_reg_257 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar1_reg_268 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar1_reg_268_pp1_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state20_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i1_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state25_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state27_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal tmp_2_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ctrl3_reg_478 : STD_LOGIC_VECTOR (29 downto 0);
    signal coe1_reg_483 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal gmem_addr_1_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_500_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_351_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_10_fu_357_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_509_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal fir_ctrl_0_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal fir_ctrl_1_1_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal reload_1_fu_367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_add7_i32_shr_reg_535 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_546_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_410_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next1_reg_550 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal gmem_addr_1_read_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state24_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal tmp_2_reg_560_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_574 : STD_LOGIC_VECTOR (63 downto 0);
    signal shift_reg_load_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal x_user_V_tmp_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_last_V_tmp_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state20 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state24 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar1_phi_fu_272_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_mux_i1_phi_fu_283_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal indvar2_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal tmp_5_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_12_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state32 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component x_order_fir_coef IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component x_order_fir_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        coe : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component x_order_fir_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    coef_U : component x_order_fir_coef
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => coef_address0,
        ce0 => coef_ce0,
        we0 => coef_we0,
        d0 => gmem_addr_1_read_reg_555,
        q0 => coef_q0);

    shift_reg_U : component x_order_fir_coef
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => shift_reg_d0,
        q0 => shift_reg_q0);

    x_order_fir_AXILiteS_s_axi_U : component x_order_fir_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        coe => coe,
        ctrl => ctrl);

    x_order_fir_gmem_m_axi_U : component x_order_fir_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state20);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    x_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((x_data_0_ack_out = ap_const_logic_1) and (x_data_0_vld_out = ap_const_logic_1))) then 
                                        x_data_0_sel_rd <= not(x_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    x_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((x_data_0_ack_in = ap_const_logic_1) and (x_data_0_vld_in = ap_const_logic_1))) then 
                                        x_data_0_sel_wr <= not(x_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    x_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_data_0_state <= ap_const_lv2_0;
            else
                if ((((x_data_0_vld_in = ap_const_logic_0) and (x_data_0_state = ap_const_lv2_2)) or ((x_data_0_vld_in = ap_const_logic_0) and (x_data_0_ack_out = ap_const_logic_1) and (x_data_0_state = ap_const_lv2_3)))) then 
                    x_data_0_state <= ap_const_lv2_2;
                elsif ((((x_data_0_ack_out = ap_const_logic_0) and (x_data_0_state = ap_const_lv2_1)) or ((x_data_0_ack_out = ap_const_logic_0) and (x_data_0_vld_in = ap_const_logic_1) and (x_data_0_state = ap_const_lv2_3)))) then 
                    x_data_0_state <= ap_const_lv2_1;
                elsif (((not(((x_data_0_vld_in = ap_const_logic_0) and (x_data_0_ack_out = ap_const_logic_1))) and not(((x_data_0_ack_out = ap_const_logic_0) and (x_data_0_vld_in = ap_const_logic_1))) and (x_data_0_state = ap_const_lv2_3)) or ((x_data_0_ack_out = ap_const_logic_1) and (x_data_0_state = ap_const_lv2_1)) or ((x_data_0_vld_in = ap_const_logic_1) and (x_data_0_state = ap_const_lv2_2)))) then 
                    x_data_0_state <= ap_const_lv2_3;
                else 
                    x_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    x_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((x_last_V_0_ack_out = ap_const_logic_1) and (x_last_V_0_vld_out = ap_const_logic_1))) then 
                                        x_last_V_0_sel_rd <= not(x_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    x_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((x_last_V_0_ack_in = ap_const_logic_1) and (x_last_V_0_vld_in = ap_const_logic_1))) then 
                                        x_last_V_0_sel_wr <= not(x_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    x_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((x_last_V_0_vld_in = ap_const_logic_0) and (x_last_V_0_state = ap_const_lv2_2)) or ((x_last_V_0_vld_in = ap_const_logic_0) and (x_last_V_0_ack_out = ap_const_logic_1) and (x_last_V_0_state = ap_const_lv2_3)))) then 
                    x_last_V_0_state <= ap_const_lv2_2;
                elsif ((((x_last_V_0_ack_out = ap_const_logic_0) and (x_last_V_0_state = ap_const_lv2_1)) or ((x_last_V_0_ack_out = ap_const_logic_0) and (x_last_V_0_vld_in = ap_const_logic_1) and (x_last_V_0_state = ap_const_lv2_3)))) then 
                    x_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((x_last_V_0_vld_in = ap_const_logic_0) and (x_last_V_0_ack_out = ap_const_logic_1))) and not(((x_last_V_0_ack_out = ap_const_logic_0) and (x_last_V_0_vld_in = ap_const_logic_1))) and (x_last_V_0_state = ap_const_lv2_3)) or ((x_last_V_0_ack_out = ap_const_logic_1) and (x_last_V_0_state = ap_const_lv2_1)) or ((x_last_V_0_vld_in = ap_const_logic_1) and (x_last_V_0_state = ap_const_lv2_2)))) then 
                    x_last_V_0_state <= ap_const_lv2_3;
                else 
                    x_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    x_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((x_user_V_0_ack_out = ap_const_logic_1) and (x_user_V_0_vld_out = ap_const_logic_1))) then 
                                        x_user_V_0_sel_rd <= not(x_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    x_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((x_user_V_0_ack_in = ap_const_logic_1) and (x_user_V_0_vld_in = ap_const_logic_1))) then 
                                        x_user_V_0_sel_wr <= not(x_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    x_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((x_user_V_0_vld_in = ap_const_logic_0) and (x_user_V_0_state = ap_const_lv2_2)) or ((x_user_V_0_vld_in = ap_const_logic_0) and (x_user_V_0_ack_out = ap_const_logic_1) and (x_user_V_0_state = ap_const_lv2_3)))) then 
                    x_user_V_0_state <= ap_const_lv2_2;
                elsif ((((x_user_V_0_ack_out = ap_const_logic_0) and (x_user_V_0_state = ap_const_lv2_1)) or ((x_user_V_0_ack_out = ap_const_logic_0) and (x_user_V_0_vld_in = ap_const_logic_1) and (x_user_V_0_state = ap_const_lv2_3)))) then 
                    x_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((x_user_V_0_vld_in = ap_const_logic_0) and (x_user_V_0_ack_out = ap_const_logic_1))) and not(((x_user_V_0_ack_out = ap_const_logic_0) and (x_user_V_0_vld_in = ap_const_logic_1))) and (x_user_V_0_state = ap_const_lv2_3)) or ((x_user_V_0_ack_out = ap_const_logic_1) and (x_user_V_0_state = ap_const_lv2_1)) or ((x_user_V_0_vld_in = ap_const_logic_1) and (x_user_V_0_state = ap_const_lv2_2)))) then 
                    x_user_V_0_state <= ap_const_lv2_3;
                else 
                    x_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    y_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((y_data_1_ack_out = ap_const_logic_1) and (y_data_1_vld_out = ap_const_logic_1))) then 
                                        y_data_1_sel_rd <= not(y_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    y_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((y_data_1_ack_in = ap_const_logic_1) and (y_data_1_vld_in = ap_const_logic_1))) then 
                                        y_data_1_sel_wr <= not(y_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    y_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_data_1_state <= ap_const_lv2_0;
            else
                if ((((y_data_1_vld_in = ap_const_logic_0) and (y_data_1_state = ap_const_lv2_2)) or ((y_data_1_vld_in = ap_const_logic_0) and (y_data_1_ack_out = ap_const_logic_1) and (y_data_1_state = ap_const_lv2_3)))) then 
                    y_data_1_state <= ap_const_lv2_2;
                elsif ((((y_data_1_ack_out = ap_const_logic_0) and (y_data_1_state = ap_const_lv2_1)) or ((y_data_1_ack_out = ap_const_logic_0) and (y_data_1_vld_in = ap_const_logic_1) and (y_data_1_state = ap_const_lv2_3)))) then 
                    y_data_1_state <= ap_const_lv2_1;
                elsif (((not(((y_data_1_vld_in = ap_const_logic_0) and (y_data_1_ack_out = ap_const_logic_1))) and not(((y_data_1_ack_out = ap_const_logic_0) and (y_data_1_vld_in = ap_const_logic_1))) and (y_data_1_state = ap_const_lv2_3)) or ((y_data_1_ack_out = ap_const_logic_1) and (y_data_1_state = ap_const_lv2_1)) or ((y_data_1_vld_in = ap_const_logic_1) and (y_data_1_state = ap_const_lv2_2)))) then 
                    y_data_1_state <= ap_const_lv2_3;
                else 
                    y_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    y_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((y_last_V_1_ack_out = ap_const_logic_1) and (y_last_V_1_vld_out = ap_const_logic_1))) then 
                                        y_last_V_1_sel_rd <= not(y_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    y_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((y_last_V_1_ack_in = ap_const_logic_1) and (y_last_V_1_vld_in = ap_const_logic_1))) then 
                                        y_last_V_1_sel_wr <= not(y_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    y_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((y_last_V_1_vld_in = ap_const_logic_0) and (y_last_V_1_state = ap_const_lv2_2)) or ((y_last_V_1_vld_in = ap_const_logic_0) and (y_last_V_1_ack_out = ap_const_logic_1) and (y_last_V_1_state = ap_const_lv2_3)))) then 
                    y_last_V_1_state <= ap_const_lv2_2;
                elsif ((((y_last_V_1_ack_out = ap_const_logic_0) and (y_last_V_1_state = ap_const_lv2_1)) or ((y_last_V_1_ack_out = ap_const_logic_0) and (y_last_V_1_vld_in = ap_const_logic_1) and (y_last_V_1_state = ap_const_lv2_3)))) then 
                    y_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((y_last_V_1_vld_in = ap_const_logic_0) and (y_last_V_1_ack_out = ap_const_logic_1))) and not(((y_last_V_1_ack_out = ap_const_logic_0) and (y_last_V_1_vld_in = ap_const_logic_1))) and (y_last_V_1_state = ap_const_lv2_3)) or ((y_last_V_1_ack_out = ap_const_logic_1) and (y_last_V_1_state = ap_const_lv2_1)) or ((y_last_V_1_vld_in = ap_const_logic_1) and (y_last_V_1_state = ap_const_lv2_2)))) then 
                    y_last_V_1_state <= ap_const_lv2_3;
                else 
                    y_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    y_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((y_user_V_1_ack_out = ap_const_logic_1) and (y_user_V_1_vld_out = ap_const_logic_1))) then 
                                        y_user_V_1_sel_rd <= not(y_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    y_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((y_user_V_1_ack_in = ap_const_logic_1) and (y_user_V_1_vld_in = ap_const_logic_1))) then 
                                        y_user_V_1_sel_wr <= not(y_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    y_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((y_user_V_1_vld_in = ap_const_logic_0) and (y_user_V_1_state = ap_const_lv2_2)) or ((y_user_V_1_vld_in = ap_const_logic_0) and (y_user_V_1_ack_out = ap_const_logic_1) and (y_user_V_1_state = ap_const_lv2_3)))) then 
                    y_user_V_1_state <= ap_const_lv2_2;
                elsif ((((y_user_V_1_ack_out = ap_const_logic_0) and (y_user_V_1_state = ap_const_lv2_1)) or ((y_user_V_1_ack_out = ap_const_logic_0) and (y_user_V_1_vld_in = ap_const_logic_1) and (y_user_V_1_state = ap_const_lv2_3)))) then 
                    y_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((y_user_V_1_vld_in = ap_const_logic_0) and (y_user_V_1_ack_out = ap_const_logic_1))) and not(((y_user_V_1_ack_out = ap_const_logic_0) and (y_user_V_1_vld_in = ap_const_logic_1))) and (y_user_V_1_state = ap_const_lv2_3)) or ((y_user_V_1_ack_out = ap_const_logic_1) and (y_user_V_1_state = ap_const_lv2_1)) or ((y_user_V_1_vld_in = ap_const_logic_1) and (y_user_V_1_state = ap_const_lv2_2)))) then 
                    y_user_V_1_state <= ap_const_lv2_3;
                else 
                    y_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    acc_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (tmp_2_reg_560_pp2_iter1_reg = ap_const_lv1_0))) then 
                acc_reg_290 <= acc_2_fu_448_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                acc_reg_290 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_2_reg_560 = ap_const_lv1_0))) then 
                i1_reg_280 <= i_1_reg_564;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i1_reg_280 <= i_reg_233;
            end if; 
        end if;
    end process;

    indvar1_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_reg_546 = ap_const_lv1_0))) then 
                indvar1_reg_268 <= indvar_next1_reg_550;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvar1_reg_268 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    indvar_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_fu_345_p2 = ap_const_lv1_0))) then 
                indvar_reg_257 <= indvar_next_fu_351_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_257 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                coe1_reg_483 <= coe(31 downto 2);
                ctrl3_reg_478 <= ctrl(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond1_reg_546 <= exitcond1_fu_405_p2;
                exitcond1_reg_546_pp1_iter1_reg <= exitcond1_reg_546;
                indvar1_reg_268_pp1_iter1_reg <= indvar1_reg_268;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_500 <= exitcond_fu_345_p2;
                exitcond_reg_500_pp0_iter1_reg <= exitcond_reg_500;
                tmp_10_reg_509_pp0_iter1_reg <= tmp_10_reg_509;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_500 = ap_const_lv1_0))) then
                fir_ctrl_0_reg_515 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_reg_546 = ap_const_lv1_0))) then
                gmem_addr_1_read_reg_555 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    gmem_addr_1_reg_494(29 downto 0) <= tmp_9_fu_336_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_2_fu_421_p2 = ap_const_lv1_0))) then
                i_1_reg_564 <= i_1_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_reg_500_pp0_iter1_reg = ap_const_lv1_0))) then
                i_reg_233 <= fir_ctrl_1_1_fu_361_p3;
                reload_reg_245 <= reload_1_fu_367_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                indvar_next1_reg_550 <= indvar_next1_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_fu_373_p2 = ap_const_lv1_0))) then
                p_add7_i32_shr_reg_535 <= tmp_1_fu_385_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (tmp_2_reg_560 = ap_const_lv1_0)))) then
                reg_302 <= coef_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (tmp_2_reg_560 = ap_const_lv1_0))) then
                shift_reg_load_reg_584 <= shift_reg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_fu_345_p2 = ap_const_lv1_0))) then
                tmp_10_reg_509 <= tmp_10_fu_357_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_2_reg_560 <= tmp_2_fu_421_p2;
                tmp_2_reg_560_pp2_iter1_reg <= tmp_2_reg_560;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((x_data_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                tmp_3_reg_609 <= tmp_3_fu_466_p2;
                x_last_V_tmp_reg_604 <= x_last_V_0_data_out;
                x_user_V_tmp_reg_599 <= x_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_2_fu_421_p2 = ap_const_lv1_0))) then
                tmp_7_reg_574 <= tmp_7_fu_438_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_2_reg_560 = ap_const_lv1_0))) then
                tmp_8_reg_589 <= tmp_8_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((x_data_0_load_A = ap_const_logic_1)) then
                x_data_0_payload_A <= x_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((x_data_0_load_B = ap_const_logic_1)) then
                x_data_0_payload_B <= x_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((x_last_V_0_load_A = ap_const_logic_1)) then
                x_last_V_0_payload_A <= x_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((x_last_V_0_load_B = ap_const_logic_1)) then
                x_last_V_0_payload_B <= x_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((x_user_V_0_load_A = ap_const_logic_1)) then
                x_user_V_0_payload_A <= x_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((x_user_V_0_load_B = ap_const_logic_1)) then
                x_user_V_0_payload_B <= x_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((y_data_1_load_A = ap_const_logic_1)) then
                y_data_1_payload_A <= acc_1_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((y_data_1_load_B = ap_const_logic_1)) then
                y_data_1_payload_B <= acc_1_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((y_last_V_1_load_A = ap_const_logic_1)) then
                y_last_V_1_payload_A <= x_last_V_tmp_reg_604;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((y_last_V_1_load_B = ap_const_logic_1)) then
                y_last_V_1_payload_B <= x_last_V_tmp_reg_604;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((y_user_V_1_load_A = ap_const_logic_1)) then
                y_user_V_1_payload_A <= x_user_V_tmp_reg_599;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((y_user_V_1_load_B = ap_const_logic_1)) then
                y_user_V_1_payload_B <= x_user_V_tmp_reg_599;
            end if;
        end if;
    end process;
    gmem_addr_1_reg_494(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, y_data_1_ack_in, y_data_1_state, y_user_V_1_ack_in, y_user_V_1_state, y_last_V_1_ack_in, y_last_V_1_state, x_data_0_vld_out, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state13, ap_enable_reg_pp1_iter1, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state30, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_sig_ioackin_gmem_ARREADY, exitcond_fu_345_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_fu_373_p2, ap_CS_fsm_state12, exitcond1_fu_405_p2, ap_enable_reg_pp1_iter0, tmp_2_fu_421_p2, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_345_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_345_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_fu_373_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond1_fu_405_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond1_fu_405_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_2_fu_421_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_2_fu_421_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((x_data_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (y_data_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if ((not(((y_last_V_1_ack_in = ap_const_logic_0) or (y_user_V_1_ack_in = ap_const_logic_0) or (y_data_1_ack_in = ap_const_logic_0))) and (y_last_V_1_state(0) = ap_const_logic_0) and (y_user_V_1_state(0) = ap_const_logic_0) and (y_data_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_1_fu_472_p2 <= std_logic_vector(unsigned(tmp_3_reg_609) + unsigned(acc_reg_290));
    acc_2_fu_448_p2 <= std_logic_vector(unsigned(tmp_8_reg_589) + unsigned(acc_reg_290));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state28 <= ap_CS_fsm(21);
    ap_CS_fsm_state29 <= ap_CS_fsm(22);
    ap_CS_fsm_state30 <= ap_CS_fsm(23);
    ap_CS_fsm_state31 <= ap_CS_fsm(24);
    ap_CS_fsm_state32 <= ap_CS_fsm(25);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_500, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_500 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_500, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_500 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_546, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond1_reg_546 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond1_reg_546, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (exitcond1_reg_546 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond_reg_500, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond_reg_500 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp1_stage0_iter1_assign_proc : process(exitcond1_reg_546, gmem_RVALID)
    begin
                ap_block_state21_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond1_reg_546 = ap_const_lv1_0));
    end process;

        ap_block_state22_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_assign_proc : process(y_data_1_ack_in, y_user_V_1_ack_in, y_last_V_1_ack_in)
    begin
                ap_block_state32 <= ((y_last_V_1_ack_in = ap_const_logic_0) or (y_user_V_1_ack_in = ap_const_logic_0) or (y_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond_fu_345_p2)
    begin
        if ((exitcond_fu_345_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state20_assign_proc : process(exitcond1_fu_405_p2)
    begin
        if ((exitcond1_fu_405_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state24_assign_proc : process(tmp_2_fu_421_p2)
    begin
        if ((tmp_2_fu_421_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(y_data_1_ack_in, y_data_1_state, y_user_V_1_ack_in, y_user_V_1_state, y_last_V_1_ack_in, y_last_V_1_state, ap_CS_fsm_state32)
    begin
        if ((not(((y_last_V_1_ack_in = ap_const_logic_0) or (y_user_V_1_ack_in = ap_const_logic_0) or (y_data_1_ack_in = ap_const_logic_0))) and (y_last_V_1_state(0) = ap_const_logic_0) and (y_user_V_1_state(0) = ap_const_logic_0) and (y_data_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_283_p4_assign_proc : process(i1_reg_280, tmp_2_reg_560, ap_CS_fsm_pp2_stage0, i_1_reg_564, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_2_reg_560 = ap_const_lv1_0))) then 
            ap_phi_mux_i1_phi_fu_283_p4 <= i_1_reg_564;
        else 
            ap_phi_mux_i1_phi_fu_283_p4 <= i1_reg_280;
        end if; 
    end process;


    ap_phi_mux_indvar1_phi_fu_272_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond1_reg_546, indvar1_reg_268, indvar_next1_reg_550)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_reg_546 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar1_phi_fu_272_p4 <= indvar_next1_reg_550;
        else 
            ap_phi_mux_indvar1_phi_fu_272_p4 <= indvar1_reg_268;
        end if; 
    end process;


    ap_ready_assign_proc : process(y_data_1_ack_in, y_data_1_state, y_user_V_1_ack_in, y_user_V_1_state, y_last_V_1_ack_in, y_last_V_1_state, ap_CS_fsm_state32)
    begin
        if ((not(((y_last_V_1_ack_in = ap_const_logic_0) or (y_user_V_1_ack_in = ap_const_logic_0) or (y_data_1_ack_in = ap_const_logic_0))) and (y_last_V_1_state(0) = ap_const_logic_0) and (y_user_V_1_state(0) = ap_const_logic_0) and (y_data_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    coef_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, tmp_7_fu_438_p1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0, indvar2_fu_416_p1, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            coef_address0 <= ap_const_lv10_0;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            coef_address0 <= tmp_7_fu_438_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            coef_address0 <= indvar2_fu_416_p1(10 - 1 downto 0);
        else 
            coef_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    coef_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            coef_ce0 <= ap_const_logic_1;
        else 
            coef_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    coef_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond1_reg_546_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond1_reg_546_pp1_iter1_reg = ap_const_lv1_0))) then 
            coef_we0 <= ap_const_logic_1;
        else 
            coef_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_405_p2 <= "1" when (ap_phi_mux_indvar1_phi_fu_272_p4 = p_add7_i32_shr_reg_535) else "0";
    exitcond_fu_345_p2 <= "1" when (indvar_reg_257 = ap_const_lv2_2) else "0";
    fir_ctrl_1_1_fu_361_p3 <= 
        fir_ctrl_0_reg_515 when (tmp_10_reg_509_pp0_iter1_reg(0) = '1') else 
        i_reg_233;

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, gmem_addr_1_reg_494, tmp_5_fu_326_p1, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                gmem_ARADDR <= gmem_addr_1_reg_494;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARADDR <= tmp_5_fu_326_p1(32 - 1 downto 0);
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, tmp_s_fu_401_p1, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                gmem_ARLEN <= tmp_s_fu_401_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARLEN <= ap_const_lv32_2;
            else 
                gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_500, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond1_reg_546, ap_block_pp1_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_reg_546 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_500 = ap_const_lv1_0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_500, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond1_reg_546)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_reg_546 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_500 = ap_const_lv1_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_1_fu_427_p2 <= std_logic_vector(signed(ap_phi_mux_i1_phi_fu_283_p4) + signed(ap_const_lv32_FFFFFFFF));
    indvar2_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar1_reg_268_pp1_iter1_reg),64));
    indvar_next1_fu_410_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar1_phi_fu_272_p4) + unsigned(ap_const_lv30_1));
    indvar_next_fu_351_p2 <= std_logic_vector(unsigned(indvar_reg_257) + unsigned(ap_const_lv2_1));
    reload_1_fu_367_p3 <= 
        reload_reg_245 when (tmp_10_reg_509_pp0_iter1_reg(0) = '1') else 
        fir_ctrl_0_reg_515;

    shift_reg_address0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, tmp_7_reg_574, ap_block_pp2_stage0, tmp_6_fu_433_p1, ap_block_pp2_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            shift_reg_address0 <= ap_const_lv10_0;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            shift_reg_address0 <= tmp_7_reg_574(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            shift_reg_address0 <= tmp_6_fu_433_p1(10 - 1 downto 0);
        else 
            shift_reg_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    shift_reg_ce0_assign_proc : process(x_data_0_vld_out, ap_CS_fsm_state30, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((x_data_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            shift_reg_ce0 <= ap_const_logic_1;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_d0_assign_proc : process(x_data_0_data_out, shift_reg_q0, ap_CS_fsm_state30, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            shift_reg_d0 <= x_data_0_data_out;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            shift_reg_d0 <= shift_reg_q0;
        else 
            shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_we0_assign_proc : process(x_data_0_vld_out, ap_CS_fsm_state30, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, tmp_2_reg_560)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (tmp_2_reg_560 = ap_const_lv1_0)) or ((x_data_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            shift_reg_we0 <= ap_const_logic_1;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_357_p1 <= indvar_reg_257(1 - 1 downto 0);
    tmp_12_fu_379_p2 <= std_logic_vector(shift_left(unsigned(i_reg_233),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_1_fu_385_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(tmp_12_fu_379_p2));
    tmp_2_fu_421_p2 <= "1" when (ap_phi_mux_i1_phi_fu_283_p4 = ap_const_lv32_0) else "0";
    tmp_3_fu_466_p1 <= x_data_0_data_out;
    tmp_3_fu_466_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_302) * signed(tmp_3_fu_466_p1))), 32));
    tmp_5_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctrl3_reg_478),64));
        tmp_6_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_1_fu_427_p2),64));

        tmp_7_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_i1_phi_fu_283_p4),64));

    tmp_8_fu_443_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_302) * signed(shift_reg_load_reg_584))), 32));
    tmp_9_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coe1_reg_483),64));
    tmp_fu_373_p2 <= "1" when (reload_reg_245 = ap_const_lv32_0) else "0";
    tmp_s_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_add7_i32_shr_reg_535),32));

    x_TDATA_blk_n_assign_proc : process(x_data_0_state, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x_TDATA_blk_n <= x_data_0_state(0);
        else 
            x_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x_TREADY <= x_last_V_0_state(1);
    x_data_0_ack_in <= x_data_0_state(1);

    x_data_0_ack_out_assign_proc : process(x_data_0_vld_out, ap_CS_fsm_state30)
    begin
        if (((x_data_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            x_data_0_ack_out <= ap_const_logic_1;
        else 
            x_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    x_data_0_data_out_assign_proc : process(x_data_0_payload_A, x_data_0_payload_B, x_data_0_sel)
    begin
        if ((x_data_0_sel = ap_const_logic_1)) then 
            x_data_0_data_out <= x_data_0_payload_B;
        else 
            x_data_0_data_out <= x_data_0_payload_A;
        end if; 
    end process;

    x_data_0_load_A <= (x_data_0_state_cmp_full and not(x_data_0_sel_wr));
    x_data_0_load_B <= (x_data_0_state_cmp_full and x_data_0_sel_wr);
    x_data_0_sel <= x_data_0_sel_rd;
    x_data_0_state_cmp_full <= '0' when (x_data_0_state = ap_const_lv2_1) else '1';
    x_data_0_vld_in <= x_TVALID;
    x_data_0_vld_out <= x_data_0_state(0);
    x_last_V_0_ack_in <= x_last_V_0_state(1);

    x_last_V_0_ack_out_assign_proc : process(x_data_0_vld_out, ap_CS_fsm_state30)
    begin
        if (((x_data_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            x_last_V_0_ack_out <= ap_const_logic_1;
        else 
            x_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    x_last_V_0_data_out_assign_proc : process(x_last_V_0_payload_A, x_last_V_0_payload_B, x_last_V_0_sel)
    begin
        if ((x_last_V_0_sel = ap_const_logic_1)) then 
            x_last_V_0_data_out <= x_last_V_0_payload_B;
        else 
            x_last_V_0_data_out <= x_last_V_0_payload_A;
        end if; 
    end process;

    x_last_V_0_load_A <= (x_last_V_0_state_cmp_full and not(x_last_V_0_sel_wr));
    x_last_V_0_load_B <= (x_last_V_0_state_cmp_full and x_last_V_0_sel_wr);
    x_last_V_0_sel <= x_last_V_0_sel_rd;
    x_last_V_0_state_cmp_full <= '0' when (x_last_V_0_state = ap_const_lv2_1) else '1';
    x_last_V_0_vld_in <= x_TVALID;
    x_last_V_0_vld_out <= x_last_V_0_state(0);
    x_user_V_0_ack_in <= x_user_V_0_state(1);

    x_user_V_0_ack_out_assign_proc : process(x_data_0_vld_out, ap_CS_fsm_state30)
    begin
        if (((x_data_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            x_user_V_0_ack_out <= ap_const_logic_1;
        else 
            x_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    x_user_V_0_data_out_assign_proc : process(x_user_V_0_payload_A, x_user_V_0_payload_B, x_user_V_0_sel)
    begin
        if ((x_user_V_0_sel = ap_const_logic_1)) then 
            x_user_V_0_data_out <= x_user_V_0_payload_B;
        else 
            x_user_V_0_data_out <= x_user_V_0_payload_A;
        end if; 
    end process;

    x_user_V_0_load_A <= (x_user_V_0_state_cmp_full and not(x_user_V_0_sel_wr));
    x_user_V_0_load_B <= (x_user_V_0_state_cmp_full and x_user_V_0_sel_wr);
    x_user_V_0_sel <= x_user_V_0_sel_rd;
    x_user_V_0_state_cmp_full <= '0' when (x_user_V_0_state = ap_const_lv2_1) else '1';
    x_user_V_0_vld_in <= x_TVALID;
    x_user_V_0_vld_out <= x_user_V_0_state(0);
    y_TDATA <= y_data_1_data_out;

    y_TDATA_blk_n_assign_proc : process(y_data_1_state, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            y_TDATA_blk_n <= y_data_1_state(1);
        else 
            y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_TLAST <= y_last_V_1_data_out;
    y_TUSER <= y_user_V_1_data_out;
    y_TVALID <= y_last_V_1_state(0);
    y_data_1_ack_in <= y_data_1_state(1);
    y_data_1_ack_out <= y_TREADY;

    y_data_1_data_out_assign_proc : process(y_data_1_payload_A, y_data_1_payload_B, y_data_1_sel)
    begin
        if ((y_data_1_sel = ap_const_logic_1)) then 
            y_data_1_data_out <= y_data_1_payload_B;
        else 
            y_data_1_data_out <= y_data_1_payload_A;
        end if; 
    end process;

    y_data_1_load_A <= (y_data_1_state_cmp_full and not(y_data_1_sel_wr));
    y_data_1_load_B <= (y_data_1_state_cmp_full and y_data_1_sel_wr);
    y_data_1_sel <= y_data_1_sel_rd;
    y_data_1_state_cmp_full <= '0' when (y_data_1_state = ap_const_lv2_1) else '1';

    y_data_1_vld_in_assign_proc : process(y_data_1_ack_in, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (y_data_1_ack_in = ap_const_logic_1))) then 
            y_data_1_vld_in <= ap_const_logic_1;
        else 
            y_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    y_data_1_vld_out <= y_data_1_state(0);
    y_last_V_1_ack_in <= y_last_V_1_state(1);
    y_last_V_1_ack_out <= y_TREADY;

    y_last_V_1_data_out_assign_proc : process(y_last_V_1_payload_A, y_last_V_1_payload_B, y_last_V_1_sel)
    begin
        if ((y_last_V_1_sel = ap_const_logic_1)) then 
            y_last_V_1_data_out <= y_last_V_1_payload_B;
        else 
            y_last_V_1_data_out <= y_last_V_1_payload_A;
        end if; 
    end process;

    y_last_V_1_load_A <= (y_last_V_1_state_cmp_full and not(y_last_V_1_sel_wr));
    y_last_V_1_load_B <= (y_last_V_1_state_cmp_full and y_last_V_1_sel_wr);
    y_last_V_1_sel <= y_last_V_1_sel_rd;
    y_last_V_1_state_cmp_full <= '0' when (y_last_V_1_state = ap_const_lv2_1) else '1';

    y_last_V_1_vld_in_assign_proc : process(y_data_1_ack_in, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (y_data_1_ack_in = ap_const_logic_1))) then 
            y_last_V_1_vld_in <= ap_const_logic_1;
        else 
            y_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    y_last_V_1_vld_out <= y_last_V_1_state(0);
    y_user_V_1_ack_in <= y_user_V_1_state(1);
    y_user_V_1_ack_out <= y_TREADY;

    y_user_V_1_data_out_assign_proc : process(y_user_V_1_payload_A, y_user_V_1_payload_B, y_user_V_1_sel)
    begin
        if ((y_user_V_1_sel = ap_const_logic_1)) then 
            y_user_V_1_data_out <= y_user_V_1_payload_B;
        else 
            y_user_V_1_data_out <= y_user_V_1_payload_A;
        end if; 
    end process;

    y_user_V_1_load_A <= (y_user_V_1_state_cmp_full and not(y_user_V_1_sel_wr));
    y_user_V_1_load_B <= (y_user_V_1_state_cmp_full and y_user_V_1_sel_wr);
    y_user_V_1_sel <= y_user_V_1_sel_rd;
    y_user_V_1_state_cmp_full <= '0' when (y_user_V_1_state = ap_const_lv2_1) else '1';

    y_user_V_1_vld_in_assign_proc : process(y_data_1_ack_in, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (y_data_1_ack_in = ap_const_logic_1))) then 
            y_user_V_1_vld_in <= ap_const_logic_1;
        else 
            y_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    y_user_V_1_vld_out <= y_user_V_1_state(0);
end behav;
