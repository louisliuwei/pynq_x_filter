// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "x_order_fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic x_order_fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic x_order_fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> x_order_fir::ap_ST_fsm_state1 = "1";
const sc_lv<26> x_order_fir::ap_ST_fsm_state2 = "10";
const sc_lv<26> x_order_fir::ap_ST_fsm_state3 = "100";
const sc_lv<26> x_order_fir::ap_ST_fsm_state4 = "1000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state5 = "10000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state6 = "100000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state12 = "1000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state13 = "10000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state14 = "100000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state15 = "1000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state16 = "10000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state17 = "100000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state18 = "1000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state19 = "10000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_pp1_stage0 = "100000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state23 = "1000000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_pp2_stage0 = "10000000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_pp2_stage1 = "100000000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state28 = "1000000000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state29 = "10000000000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state30 = "100000000000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state31 = "1000000000000000000000000";
const sc_lv<26> x_order_fir::ap_ST_fsm_state32 = "10000000000000000000000000";
const sc_lv<32> x_order_fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool x_order_fir::ap_const_boolean_1 = true;
const sc_lv<1> x_order_fir::ap_const_lv1_0 = "0";
const sc_lv<1> x_order_fir::ap_const_lv1_1 = "1";
const sc_lv<2> x_order_fir::ap_const_lv2_0 = "00";
const sc_lv<2> x_order_fir::ap_const_lv2_2 = "10";
const sc_lv<2> x_order_fir::ap_const_lv2_3 = "11";
const sc_lv<2> x_order_fir::ap_const_lv2_1 = "1";
const sc_lv<32> x_order_fir::ap_const_lv32_1 = "1";
const sc_lv<32> x_order_fir::ap_const_lv32_8 = "1000";
const bool x_order_fir::ap_const_boolean_0 = false;
const sc_lv<32> x_order_fir::ap_const_lv32_A = "1010";
const sc_lv<32> x_order_fir::ap_const_lv32_11 = "10001";
const sc_lv<32> x_order_fir::ap_const_lv32_18 = "11000";
const sc_lv<32> x_order_fir::ap_const_lv32_19 = "11001";
const sc_lv<32> x_order_fir::ap_const_lv32_17 = "10111";
const int x_order_fir::C_S_AXI_DATA_WIDTH = "100000";
const int x_order_fir::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int x_order_fir::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int x_order_fir::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int x_order_fir::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> x_order_fir::ap_const_lv32_14 = "10100";
const sc_lv<32> x_order_fir::ap_const_lv32_16 = "10110";
const sc_lv<32> x_order_fir::ap_const_lv32_7 = "111";
const sc_lv<32> x_order_fir::ap_const_lv32_9 = "1001";
const sc_lv<32> x_order_fir::ap_const_lv32_13 = "10011";
const sc_lv<32> x_order_fir::ap_const_lv32_10 = "10000";
const sc_lv<32> x_order_fir::ap_const_lv32_12 = "10010";
const sc_lv<30> x_order_fir::ap_const_lv30_0 = "000000000000000000000000000000";
const sc_lv<32> x_order_fir::ap_const_lv32_2 = "10";
const sc_lv<3> x_order_fir::ap_const_lv3_0 = "000";
const sc_lv<4> x_order_fir::ap_const_lv4_0 = "0000";
const sc_lv<32> x_order_fir::ap_const_lv32_15 = "10101";
const sc_lv<10> x_order_fir::ap_const_lv10_0 = "0000000000";
const sc_lv<32> x_order_fir::ap_const_lv32_1F = "11111";
const sc_lv<32> x_order_fir::ap_const_lv32_4 = "100";
const sc_lv<30> x_order_fir::ap_const_lv30_1 = "1";
const sc_lv<32> x_order_fir::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";

x_order_fir::x_order_fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    coef_U = new x_order_fir_coef("coef_U");
    coef_U->clk(ap_clk);
    coef_U->reset(ap_rst_n_inv);
    coef_U->address0(coef_address0);
    coef_U->ce0(coef_ce0);
    coef_U->we0(coef_we0);
    coef_U->d0(gmem_addr_1_read_reg_555);
    coef_U->q0(coef_q0);
    shift_reg_U = new x_order_fir_coef("shift_reg_U");
    shift_reg_U->clk(ap_clk);
    shift_reg_U->reset(ap_rst_n_inv);
    shift_reg_U->address0(shift_reg_address0);
    shift_reg_U->ce0(shift_reg_ce0);
    shift_reg_U->we0(shift_reg_we0);
    shift_reg_U->d0(shift_reg_d0);
    shift_reg_U->q0(shift_reg_q0);
    x_order_fir_AXILiteS_s_axi_U = new x_order_fir_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("x_order_fir_AXILiteS_s_axi_U");
    x_order_fir_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    x_order_fir_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    x_order_fir_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    x_order_fir_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    x_order_fir_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    x_order_fir_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    x_order_fir_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    x_order_fir_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    x_order_fir_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    x_order_fir_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    x_order_fir_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    x_order_fir_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    x_order_fir_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    x_order_fir_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    x_order_fir_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    x_order_fir_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    x_order_fir_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    x_order_fir_AXILiteS_s_axi_U->ACLK(ap_clk);
    x_order_fir_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    x_order_fir_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    x_order_fir_AXILiteS_s_axi_U->ap_start(ap_start);
    x_order_fir_AXILiteS_s_axi_U->interrupt(interrupt);
    x_order_fir_AXILiteS_s_axi_U->ap_ready(ap_ready);
    x_order_fir_AXILiteS_s_axi_U->ap_done(ap_done);
    x_order_fir_AXILiteS_s_axi_U->ap_idle(ap_idle);
    x_order_fir_AXILiteS_s_axi_U->coe(coe);
    x_order_fir_AXILiteS_s_axi_U->ctrl(ctrl);
    x_order_fir_gmem_m_axi_U = new x_order_fir_gmem_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("x_order_fir_gmem_m_axi_U");
    x_order_fir_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    x_order_fir_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    x_order_fir_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    x_order_fir_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    x_order_fir_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    x_order_fir_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    x_order_fir_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    x_order_fir_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    x_order_fir_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    x_order_fir_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    x_order_fir_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    x_order_fir_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    x_order_fir_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    x_order_fir_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    x_order_fir_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    x_order_fir_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    x_order_fir_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    x_order_fir_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    x_order_fir_gmem_m_axi_U->WID(m_axi_gmem_WID);
    x_order_fir_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    x_order_fir_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    x_order_fir_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    x_order_fir_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    x_order_fir_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    x_order_fir_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    x_order_fir_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    x_order_fir_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    x_order_fir_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    x_order_fir_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    x_order_fir_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    x_order_fir_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    x_order_fir_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    x_order_fir_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    x_order_fir_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    x_order_fir_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    x_order_fir_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    x_order_fir_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    x_order_fir_gmem_m_axi_U->RID(m_axi_gmem_RID);
    x_order_fir_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    x_order_fir_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    x_order_fir_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    x_order_fir_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    x_order_fir_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    x_order_fir_gmem_m_axi_U->BID(m_axi_gmem_BID);
    x_order_fir_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    x_order_fir_gmem_m_axi_U->ACLK(ap_clk);
    x_order_fir_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    x_order_fir_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    x_order_fir_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    x_order_fir_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    x_order_fir_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    x_order_fir_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    x_order_fir_gmem_m_axi_U->I_ARLEN(gmem_ARLEN);
    x_order_fir_gmem_m_axi_U->I_ARSIZE(ap_var_for_const2);
    x_order_fir_gmem_m_axi_U->I_ARLOCK(ap_var_for_const3);
    x_order_fir_gmem_m_axi_U->I_ARCACHE(ap_var_for_const4);
    x_order_fir_gmem_m_axi_U->I_ARQOS(ap_var_for_const4);
    x_order_fir_gmem_m_axi_U->I_ARPROT(ap_var_for_const2);
    x_order_fir_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    x_order_fir_gmem_m_axi_U->I_ARBURST(ap_var_for_const3);
    x_order_fir_gmem_m_axi_U->I_ARREGION(ap_var_for_const4);
    x_order_fir_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    x_order_fir_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    x_order_fir_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    x_order_fir_gmem_m_axi_U->I_RID(gmem_RID);
    x_order_fir_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    x_order_fir_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    x_order_fir_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    x_order_fir_gmem_m_axi_U->I_AWVALID(ap_var_for_const5);
    x_order_fir_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    x_order_fir_gmem_m_axi_U->I_AWADDR(ap_var_for_const6);
    x_order_fir_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    x_order_fir_gmem_m_axi_U->I_AWLEN(ap_var_for_const6);
    x_order_fir_gmem_m_axi_U->I_AWSIZE(ap_var_for_const2);
    x_order_fir_gmem_m_axi_U->I_AWLOCK(ap_var_for_const3);
    x_order_fir_gmem_m_axi_U->I_AWCACHE(ap_var_for_const4);
    x_order_fir_gmem_m_axi_U->I_AWQOS(ap_var_for_const4);
    x_order_fir_gmem_m_axi_U->I_AWPROT(ap_var_for_const2);
    x_order_fir_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    x_order_fir_gmem_m_axi_U->I_AWBURST(ap_var_for_const3);
    x_order_fir_gmem_m_axi_U->I_AWREGION(ap_var_for_const4);
    x_order_fir_gmem_m_axi_U->I_WVALID(ap_var_for_const5);
    x_order_fir_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    x_order_fir_gmem_m_axi_U->I_WDATA(ap_var_for_const6);
    x_order_fir_gmem_m_axi_U->I_WID(ap_var_for_const1);
    x_order_fir_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    x_order_fir_gmem_m_axi_U->I_WLAST(ap_var_for_const5);
    x_order_fir_gmem_m_axi_U->I_WSTRB(ap_var_for_const4);
    x_order_fir_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    x_order_fir_gmem_m_axi_U->I_BREADY(ap_var_for_const5);
    x_order_fir_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    x_order_fir_gmem_m_axi_U->I_BID(gmem_BID);
    x_order_fir_gmem_m_axi_U->I_BUSER(gmem_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_1_fu_472_p2);
    sensitive << ( acc_reg_290 );
    sensitive << ( tmp_3_reg_609 );

    SC_METHOD(thread_acc_2_fu_448_p2);
    sensitive << ( acc_reg_290 );
    sensitive << ( tmp_8_reg_589 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_500 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_500 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_546 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_546 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_pp2_stage0);

    SC_METHOD(thread_ap_block_pp2_stage0_11001);

    SC_METHOD(thread_ap_block_pp2_stage0_subdone);

    SC_METHOD(thread_ap_block_pp2_stage1);

    SC_METHOD(thread_ap_block_pp2_stage1_11001);

    SC_METHOD(thread_ap_block_pp2_stage1_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( exitcond_reg_500 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state20_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state21_pp1_stage0_iter1);
    sensitive << ( exitcond1_reg_546 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_ap_block_state22_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state24_pp2_stage0_iter0);

    SC_METHOD(thread_ap_block_state25_pp2_stage1_iter0);

    SC_METHOD(thread_ap_block_state26_pp2_stage0_iter1);

    SC_METHOD(thread_ap_block_state27_pp2_stage1_iter1);

    SC_METHOD(thread_ap_block_state32);
    sensitive << ( y_data_1_ack_in );
    sensitive << ( y_user_V_1_ack_in );
    sensitive << ( y_last_V_1_ack_in );

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( exitcond_fu_345_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state20);
    sensitive << ( exitcond1_fu_405_p2 );

    SC_METHOD(thread_ap_condition_pp2_exit_iter0_state24);
    sensitive << ( tmp_2_fu_421_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( y_data_1_ack_in );
    sensitive << ( y_data_1_state );
    sensitive << ( y_user_V_1_ack_in );
    sensitive << ( y_user_V_1_state );
    sensitive << ( y_last_V_1_ack_in );
    sensitive << ( y_last_V_1_state );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_enable_pp2);
    sensitive << ( ap_idle_pp2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_ap_idle_pp2);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );

    SC_METHOD(thread_ap_phi_mux_i1_phi_fu_283_p4);
    sensitive << ( i1_reg_280 );
    sensitive << ( tmp_2_reg_560 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( i_1_reg_564 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_block_pp2_stage0 );

    SC_METHOD(thread_ap_phi_mux_indvar1_phi_fu_272_p4);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond1_reg_546 );
    sensitive << ( indvar1_reg_268 );
    sensitive << ( indvar_next1_reg_550 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( y_data_1_ack_in );
    sensitive << ( y_data_1_state );
    sensitive << ( y_user_V_1_ack_in );
    sensitive << ( y_user_V_1_state );
    sensitive << ( y_last_V_1_ack_in );
    sensitive << ( y_last_V_1_state );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_coef_address0);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( tmp_7_fu_438_p1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( indvar2_fu_416_p1 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_coef_ce0);
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_coef_we0);
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( exitcond1_reg_546_pp1_iter1_reg );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_exitcond1_fu_405_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( p_add7_i32_shr_reg_535 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_phi_mux_indvar1_phi_fu_272_p4 );

    SC_METHOD(thread_exitcond_fu_345_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_reg_257 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_fir_ctrl_1_1_fu_361_p3);
    sensitive << ( i_reg_233 );
    sensitive << ( tmp_10_reg_509_pp0_iter1_reg );
    sensitive << ( fir_ctrl_0_reg_515 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( gmem_addr_1_reg_494 );
    sensitive << ( tmp_5_fu_326_p1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_s_fu_401_p1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_500 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_546 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_500 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond1_reg_546 );

    SC_METHOD(thread_i_1_fu_427_p2);
    sensitive << ( ap_phi_mux_i1_phi_fu_283_p4 );

    SC_METHOD(thread_indvar2_fu_416_p1);
    sensitive << ( indvar1_reg_268_pp1_iter1_reg );

    SC_METHOD(thread_indvar_next1_fu_410_p2);
    sensitive << ( ap_phi_mux_indvar1_phi_fu_272_p4 );

    SC_METHOD(thread_indvar_next_fu_351_p2);
    sensitive << ( indvar_reg_257 );

    SC_METHOD(thread_reload_1_fu_367_p3);
    sensitive << ( reload_reg_245 );
    sensitive << ( tmp_10_reg_509_pp0_iter1_reg );
    sensitive << ( fir_ctrl_0_reg_515 );

    SC_METHOD(thread_shift_reg_address0);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( tmp_7_reg_574 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( tmp_6_fu_433_p1 );
    sensitive << ( ap_block_pp2_stage1 );

    SC_METHOD(thread_shift_reg_ce0);
    sensitive << ( x_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp2_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_shift_reg_d0);
    sensitive << ( x_data_0_data_out );
    sensitive << ( shift_reg_q0 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp2_stage1 );

    SC_METHOD(thread_shift_reg_we0);
    sensitive << ( x_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp2_stage1_11001 );
    sensitive << ( tmp_2_reg_560 );

    SC_METHOD(thread_tmp_10_fu_357_p1);
    sensitive << ( indvar_reg_257 );

    SC_METHOD(thread_tmp_12_fu_379_p2);
    sensitive << ( i_reg_233 );

    SC_METHOD(thread_tmp_1_fu_385_p2);
    sensitive << ( tmp_12_fu_379_p2 );

    SC_METHOD(thread_tmp_2_fu_421_p2);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_phi_mux_i1_phi_fu_283_p4 );

    SC_METHOD(thread_tmp_3_fu_466_p1);
    sensitive << ( x_data_0_data_out );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_tmp_3_fu_466_p2);
    sensitive << ( reg_302 );
    sensitive << ( tmp_3_fu_466_p1 );

    SC_METHOD(thread_tmp_5_fu_326_p1);
    sensitive << ( ctrl3_reg_478 );

    SC_METHOD(thread_tmp_6_fu_433_p1);
    sensitive << ( i_1_fu_427_p2 );

    SC_METHOD(thread_tmp_7_fu_438_p1);
    sensitive << ( ap_phi_mux_i1_phi_fu_283_p4 );

    SC_METHOD(thread_tmp_8_fu_443_p2);
    sensitive << ( reg_302 );
    sensitive << ( shift_reg_load_reg_584 );

    SC_METHOD(thread_tmp_9_fu_336_p1);
    sensitive << ( coe1_reg_483 );

    SC_METHOD(thread_tmp_fu_373_p2);
    sensitive << ( reload_reg_245 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_tmp_s_fu_401_p1);
    sensitive << ( p_add7_i32_shr_reg_535 );

    SC_METHOD(thread_x_TDATA_blk_n);
    sensitive << ( x_data_0_state );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_x_TREADY);
    sensitive << ( x_last_V_0_state );

    SC_METHOD(thread_x_data_0_ack_in);
    sensitive << ( x_data_0_state );

    SC_METHOD(thread_x_data_0_ack_out);
    sensitive << ( x_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_x_data_0_data_out);
    sensitive << ( x_data_0_payload_A );
    sensitive << ( x_data_0_payload_B );
    sensitive << ( x_data_0_sel );

    SC_METHOD(thread_x_data_0_load_A);
    sensitive << ( x_data_0_sel_wr );
    sensitive << ( x_data_0_state_cmp_full );

    SC_METHOD(thread_x_data_0_load_B);
    sensitive << ( x_data_0_sel_wr );
    sensitive << ( x_data_0_state_cmp_full );

    SC_METHOD(thread_x_data_0_sel);
    sensitive << ( x_data_0_sel_rd );

    SC_METHOD(thread_x_data_0_state_cmp_full);
    sensitive << ( x_data_0_state );

    SC_METHOD(thread_x_data_0_vld_in);
    sensitive << ( x_TVALID );

    SC_METHOD(thread_x_data_0_vld_out);
    sensitive << ( x_data_0_state );

    SC_METHOD(thread_x_last_V_0_ack_in);
    sensitive << ( x_last_V_0_state );

    SC_METHOD(thread_x_last_V_0_ack_out);
    sensitive << ( x_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_x_last_V_0_data_out);
    sensitive << ( x_last_V_0_payload_A );
    sensitive << ( x_last_V_0_payload_B );
    sensitive << ( x_last_V_0_sel );

    SC_METHOD(thread_x_last_V_0_load_A);
    sensitive << ( x_last_V_0_sel_wr );
    sensitive << ( x_last_V_0_state_cmp_full );

    SC_METHOD(thread_x_last_V_0_load_B);
    sensitive << ( x_last_V_0_sel_wr );
    sensitive << ( x_last_V_0_state_cmp_full );

    SC_METHOD(thread_x_last_V_0_sel);
    sensitive << ( x_last_V_0_sel_rd );

    SC_METHOD(thread_x_last_V_0_state_cmp_full);
    sensitive << ( x_last_V_0_state );

    SC_METHOD(thread_x_last_V_0_vld_in);
    sensitive << ( x_TVALID );

    SC_METHOD(thread_x_last_V_0_vld_out);
    sensitive << ( x_last_V_0_state );

    SC_METHOD(thread_x_user_V_0_ack_in);
    sensitive << ( x_user_V_0_state );

    SC_METHOD(thread_x_user_V_0_ack_out);
    sensitive << ( x_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_x_user_V_0_data_out);
    sensitive << ( x_user_V_0_payload_A );
    sensitive << ( x_user_V_0_payload_B );
    sensitive << ( x_user_V_0_sel );

    SC_METHOD(thread_x_user_V_0_load_A);
    sensitive << ( x_user_V_0_sel_wr );
    sensitive << ( x_user_V_0_state_cmp_full );

    SC_METHOD(thread_x_user_V_0_load_B);
    sensitive << ( x_user_V_0_sel_wr );
    sensitive << ( x_user_V_0_state_cmp_full );

    SC_METHOD(thread_x_user_V_0_sel);
    sensitive << ( x_user_V_0_sel_rd );

    SC_METHOD(thread_x_user_V_0_state_cmp_full);
    sensitive << ( x_user_V_0_state );

    SC_METHOD(thread_x_user_V_0_vld_in);
    sensitive << ( x_TVALID );

    SC_METHOD(thread_x_user_V_0_vld_out);
    sensitive << ( x_user_V_0_state );

    SC_METHOD(thread_y_TDATA);
    sensitive << ( y_data_1_data_out );

    SC_METHOD(thread_y_TDATA_blk_n);
    sensitive << ( y_data_1_state );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_y_TLAST);
    sensitive << ( y_last_V_1_data_out );

    SC_METHOD(thread_y_TUSER);
    sensitive << ( y_user_V_1_data_out );

    SC_METHOD(thread_y_TVALID);
    sensitive << ( y_last_V_1_state );

    SC_METHOD(thread_y_data_1_ack_in);
    sensitive << ( y_data_1_state );

    SC_METHOD(thread_y_data_1_ack_out);
    sensitive << ( y_TREADY );

    SC_METHOD(thread_y_data_1_data_out);
    sensitive << ( y_data_1_payload_A );
    sensitive << ( y_data_1_payload_B );
    sensitive << ( y_data_1_sel );

    SC_METHOD(thread_y_data_1_load_A);
    sensitive << ( y_data_1_sel_wr );
    sensitive << ( y_data_1_state_cmp_full );

    SC_METHOD(thread_y_data_1_load_B);
    sensitive << ( y_data_1_sel_wr );
    sensitive << ( y_data_1_state_cmp_full );

    SC_METHOD(thread_y_data_1_sel);
    sensitive << ( y_data_1_sel_rd );

    SC_METHOD(thread_y_data_1_state_cmp_full);
    sensitive << ( y_data_1_state );

    SC_METHOD(thread_y_data_1_vld_in);
    sensitive << ( y_data_1_ack_in );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_y_data_1_vld_out);
    sensitive << ( y_data_1_state );

    SC_METHOD(thread_y_last_V_1_ack_in);
    sensitive << ( y_last_V_1_state );

    SC_METHOD(thread_y_last_V_1_ack_out);
    sensitive << ( y_TREADY );

    SC_METHOD(thread_y_last_V_1_data_out);
    sensitive << ( y_last_V_1_payload_A );
    sensitive << ( y_last_V_1_payload_B );
    sensitive << ( y_last_V_1_sel );

    SC_METHOD(thread_y_last_V_1_load_A);
    sensitive << ( y_last_V_1_sel_wr );
    sensitive << ( y_last_V_1_state_cmp_full );

    SC_METHOD(thread_y_last_V_1_load_B);
    sensitive << ( y_last_V_1_sel_wr );
    sensitive << ( y_last_V_1_state_cmp_full );

    SC_METHOD(thread_y_last_V_1_sel);
    sensitive << ( y_last_V_1_sel_rd );

    SC_METHOD(thread_y_last_V_1_state_cmp_full);
    sensitive << ( y_last_V_1_state );

    SC_METHOD(thread_y_last_V_1_vld_in);
    sensitive << ( y_data_1_ack_in );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_y_last_V_1_vld_out);
    sensitive << ( y_last_V_1_state );

    SC_METHOD(thread_y_user_V_1_ack_in);
    sensitive << ( y_user_V_1_state );

    SC_METHOD(thread_y_user_V_1_ack_out);
    sensitive << ( y_TREADY );

    SC_METHOD(thread_y_user_V_1_data_out);
    sensitive << ( y_user_V_1_payload_A );
    sensitive << ( y_user_V_1_payload_B );
    sensitive << ( y_user_V_1_sel );

    SC_METHOD(thread_y_user_V_1_load_A);
    sensitive << ( y_user_V_1_sel_wr );
    sensitive << ( y_user_V_1_state_cmp_full );

    SC_METHOD(thread_y_user_V_1_load_B);
    sensitive << ( y_user_V_1_sel_wr );
    sensitive << ( y_user_V_1_state_cmp_full );

    SC_METHOD(thread_y_user_V_1_sel);
    sensitive << ( y_user_V_1_sel_rd );

    SC_METHOD(thread_y_user_V_1_state_cmp_full);
    sensitive << ( y_user_V_1_state );

    SC_METHOD(thread_y_user_V_1_vld_in);
    sensitive << ( y_data_1_ack_in );
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_y_user_V_1_vld_out);
    sensitive << ( y_user_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( y_data_1_ack_in );
    sensitive << ( y_data_1_state );
    sensitive << ( y_user_V_1_ack_in );
    sensitive << ( y_user_V_1_state );
    sensitive << ( y_last_V_1_ack_in );
    sensitive << ( y_last_V_1_state );
    sensitive << ( x_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_pp2_stage1 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );
    sensitive << ( exitcond_fu_345_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_fu_373_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond1_fu_405_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( tmp_2_fu_421_p2 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp2_stage0_subdone );
    sensitive << ( ap_block_pp2_stage1_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const4);

    ap_CS_fsm = "00000000000000000000000001";
    y_data_1_sel_rd = SC_LOGIC_0;
    y_data_1_sel_wr = SC_LOGIC_0;
    y_data_1_state = "00";
    y_user_V_1_sel_rd = SC_LOGIC_0;
    y_user_V_1_sel_wr = SC_LOGIC_0;
    y_user_V_1_state = "00";
    y_last_V_1_sel_rd = SC_LOGIC_0;
    y_last_V_1_sel_wr = SC_LOGIC_0;
    y_last_V_1_state = "00";
    x_data_0_sel_rd = SC_LOGIC_0;
    x_data_0_sel_wr = SC_LOGIC_0;
    x_data_0_state = "00";
    x_user_V_0_sel_rd = SC_LOGIC_0;
    x_user_V_0_sel_wr = SC_LOGIC_0;
    x_user_V_0_state = "00";
    x_last_V_0_sel_rd = SC_LOGIC_0;
    x_last_V_0_sel_wr = SC_LOGIC_0;
    x_last_V_0_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "x_order_fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, y_TDATA, "(port)y_TDATA");
    sc_trace(mVcdFile, y_TVALID, "(port)y_TVALID");
    sc_trace(mVcdFile, y_TREADY, "(port)y_TREADY");
    sc_trace(mVcdFile, y_TUSER, "(port)y_TUSER");
    sc_trace(mVcdFile, y_TLAST, "(port)y_TLAST");
    sc_trace(mVcdFile, x_TDATA, "(port)x_TDATA");
    sc_trace(mVcdFile, x_TVALID, "(port)x_TVALID");
    sc_trace(mVcdFile, x_TREADY, "(port)x_TREADY");
    sc_trace(mVcdFile, x_TUSER, "(port)x_TUSER");
    sc_trace(mVcdFile, x_TLAST, "(port)x_TLAST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, y_data_1_data_out, "y_data_1_data_out");
    sc_trace(mVcdFile, y_data_1_vld_in, "y_data_1_vld_in");
    sc_trace(mVcdFile, y_data_1_vld_out, "y_data_1_vld_out");
    sc_trace(mVcdFile, y_data_1_ack_in, "y_data_1_ack_in");
    sc_trace(mVcdFile, y_data_1_ack_out, "y_data_1_ack_out");
    sc_trace(mVcdFile, y_data_1_payload_A, "y_data_1_payload_A");
    sc_trace(mVcdFile, y_data_1_payload_B, "y_data_1_payload_B");
    sc_trace(mVcdFile, y_data_1_sel_rd, "y_data_1_sel_rd");
    sc_trace(mVcdFile, y_data_1_sel_wr, "y_data_1_sel_wr");
    sc_trace(mVcdFile, y_data_1_sel, "y_data_1_sel");
    sc_trace(mVcdFile, y_data_1_load_A, "y_data_1_load_A");
    sc_trace(mVcdFile, y_data_1_load_B, "y_data_1_load_B");
    sc_trace(mVcdFile, y_data_1_state, "y_data_1_state");
    sc_trace(mVcdFile, y_data_1_state_cmp_full, "y_data_1_state_cmp_full");
    sc_trace(mVcdFile, y_user_V_1_data_out, "y_user_V_1_data_out");
    sc_trace(mVcdFile, y_user_V_1_vld_in, "y_user_V_1_vld_in");
    sc_trace(mVcdFile, y_user_V_1_vld_out, "y_user_V_1_vld_out");
    sc_trace(mVcdFile, y_user_V_1_ack_in, "y_user_V_1_ack_in");
    sc_trace(mVcdFile, y_user_V_1_ack_out, "y_user_V_1_ack_out");
    sc_trace(mVcdFile, y_user_V_1_payload_A, "y_user_V_1_payload_A");
    sc_trace(mVcdFile, y_user_V_1_payload_B, "y_user_V_1_payload_B");
    sc_trace(mVcdFile, y_user_V_1_sel_rd, "y_user_V_1_sel_rd");
    sc_trace(mVcdFile, y_user_V_1_sel_wr, "y_user_V_1_sel_wr");
    sc_trace(mVcdFile, y_user_V_1_sel, "y_user_V_1_sel");
    sc_trace(mVcdFile, y_user_V_1_load_A, "y_user_V_1_load_A");
    sc_trace(mVcdFile, y_user_V_1_load_B, "y_user_V_1_load_B");
    sc_trace(mVcdFile, y_user_V_1_state, "y_user_V_1_state");
    sc_trace(mVcdFile, y_user_V_1_state_cmp_full, "y_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, y_last_V_1_data_out, "y_last_V_1_data_out");
    sc_trace(mVcdFile, y_last_V_1_vld_in, "y_last_V_1_vld_in");
    sc_trace(mVcdFile, y_last_V_1_vld_out, "y_last_V_1_vld_out");
    sc_trace(mVcdFile, y_last_V_1_ack_in, "y_last_V_1_ack_in");
    sc_trace(mVcdFile, y_last_V_1_ack_out, "y_last_V_1_ack_out");
    sc_trace(mVcdFile, y_last_V_1_payload_A, "y_last_V_1_payload_A");
    sc_trace(mVcdFile, y_last_V_1_payload_B, "y_last_V_1_payload_B");
    sc_trace(mVcdFile, y_last_V_1_sel_rd, "y_last_V_1_sel_rd");
    sc_trace(mVcdFile, y_last_V_1_sel_wr, "y_last_V_1_sel_wr");
    sc_trace(mVcdFile, y_last_V_1_sel, "y_last_V_1_sel");
    sc_trace(mVcdFile, y_last_V_1_load_A, "y_last_V_1_load_A");
    sc_trace(mVcdFile, y_last_V_1_load_B, "y_last_V_1_load_B");
    sc_trace(mVcdFile, y_last_V_1_state, "y_last_V_1_state");
    sc_trace(mVcdFile, y_last_V_1_state_cmp_full, "y_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, x_data_0_data_out, "x_data_0_data_out");
    sc_trace(mVcdFile, x_data_0_vld_in, "x_data_0_vld_in");
    sc_trace(mVcdFile, x_data_0_vld_out, "x_data_0_vld_out");
    sc_trace(mVcdFile, x_data_0_ack_in, "x_data_0_ack_in");
    sc_trace(mVcdFile, x_data_0_ack_out, "x_data_0_ack_out");
    sc_trace(mVcdFile, x_data_0_payload_A, "x_data_0_payload_A");
    sc_trace(mVcdFile, x_data_0_payload_B, "x_data_0_payload_B");
    sc_trace(mVcdFile, x_data_0_sel_rd, "x_data_0_sel_rd");
    sc_trace(mVcdFile, x_data_0_sel_wr, "x_data_0_sel_wr");
    sc_trace(mVcdFile, x_data_0_sel, "x_data_0_sel");
    sc_trace(mVcdFile, x_data_0_load_A, "x_data_0_load_A");
    sc_trace(mVcdFile, x_data_0_load_B, "x_data_0_load_B");
    sc_trace(mVcdFile, x_data_0_state, "x_data_0_state");
    sc_trace(mVcdFile, x_data_0_state_cmp_full, "x_data_0_state_cmp_full");
    sc_trace(mVcdFile, x_user_V_0_data_out, "x_user_V_0_data_out");
    sc_trace(mVcdFile, x_user_V_0_vld_in, "x_user_V_0_vld_in");
    sc_trace(mVcdFile, x_user_V_0_vld_out, "x_user_V_0_vld_out");
    sc_trace(mVcdFile, x_user_V_0_ack_in, "x_user_V_0_ack_in");
    sc_trace(mVcdFile, x_user_V_0_ack_out, "x_user_V_0_ack_out");
    sc_trace(mVcdFile, x_user_V_0_payload_A, "x_user_V_0_payload_A");
    sc_trace(mVcdFile, x_user_V_0_payload_B, "x_user_V_0_payload_B");
    sc_trace(mVcdFile, x_user_V_0_sel_rd, "x_user_V_0_sel_rd");
    sc_trace(mVcdFile, x_user_V_0_sel_wr, "x_user_V_0_sel_wr");
    sc_trace(mVcdFile, x_user_V_0_sel, "x_user_V_0_sel");
    sc_trace(mVcdFile, x_user_V_0_load_A, "x_user_V_0_load_A");
    sc_trace(mVcdFile, x_user_V_0_load_B, "x_user_V_0_load_B");
    sc_trace(mVcdFile, x_user_V_0_state, "x_user_V_0_state");
    sc_trace(mVcdFile, x_user_V_0_state_cmp_full, "x_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, x_last_V_0_data_out, "x_last_V_0_data_out");
    sc_trace(mVcdFile, x_last_V_0_vld_in, "x_last_V_0_vld_in");
    sc_trace(mVcdFile, x_last_V_0_vld_out, "x_last_V_0_vld_out");
    sc_trace(mVcdFile, x_last_V_0_ack_in, "x_last_V_0_ack_in");
    sc_trace(mVcdFile, x_last_V_0_ack_out, "x_last_V_0_ack_out");
    sc_trace(mVcdFile, x_last_V_0_payload_A, "x_last_V_0_payload_A");
    sc_trace(mVcdFile, x_last_V_0_payload_B, "x_last_V_0_payload_B");
    sc_trace(mVcdFile, x_last_V_0_sel_rd, "x_last_V_0_sel_rd");
    sc_trace(mVcdFile, x_last_V_0_sel_wr, "x_last_V_0_sel_wr");
    sc_trace(mVcdFile, x_last_V_0_sel, "x_last_V_0_sel");
    sc_trace(mVcdFile, x_last_V_0_load_A, "x_last_V_0_load_A");
    sc_trace(mVcdFile, x_last_V_0_load_B, "x_last_V_0_load_B");
    sc_trace(mVcdFile, x_last_V_0_state, "x_last_V_0_state");
    sc_trace(mVcdFile, x_last_V_0_state_cmp_full, "x_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, coe, "coe");
    sc_trace(mVcdFile, ctrl, "ctrl");
    sc_trace(mVcdFile, coef_address0, "coef_address0");
    sc_trace(mVcdFile, coef_ce0, "coef_ce0");
    sc_trace(mVcdFile, coef_we0, "coef_we0");
    sc_trace(mVcdFile, coef_q0, "coef_q0");
    sc_trace(mVcdFile, shift_reg_address0, "shift_reg_address0");
    sc_trace(mVcdFile, shift_reg_ce0, "shift_reg_ce0");
    sc_trace(mVcdFile, shift_reg_we0, "shift_reg_we0");
    sc_trace(mVcdFile, shift_reg_d0, "shift_reg_d0");
    sc_trace(mVcdFile, shift_reg_q0, "shift_reg_q0");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_500, "exitcond_reg_500");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, exitcond1_reg_546, "exitcond1_reg_546");
    sc_trace(mVcdFile, y_TDATA_blk_n, "y_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, x_TDATA_blk_n, "x_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_ARLEN, "gmem_ARLEN");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, i_reg_233, "i_reg_233");
    sc_trace(mVcdFile, reload_reg_245, "reload_reg_245");
    sc_trace(mVcdFile, indvar_reg_257, "indvar_reg_257");
    sc_trace(mVcdFile, indvar1_reg_268, "indvar1_reg_268");
    sc_trace(mVcdFile, indvar1_reg_268_pp1_iter1_reg, "indvar1_reg_268_pp1_iter1_reg");
    sc_trace(mVcdFile, ap_block_state20_pp1_stage0_iter0, "ap_block_state20_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state21_pp1_stage0_iter1, "ap_block_state21_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state22_pp1_stage0_iter2, "ap_block_state22_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, i1_reg_280, "i1_reg_280");
    sc_trace(mVcdFile, acc_reg_290, "acc_reg_290");
    sc_trace(mVcdFile, reg_302, "reg_302");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage1, "ap_CS_fsm_pp2_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, ap_block_state25_pp2_stage1_iter0, "ap_block_state25_pp2_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state27_pp2_stage1_iter1, "ap_block_state27_pp2_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp2_stage1_11001, "ap_block_pp2_stage1_11001");
    sc_trace(mVcdFile, tmp_2_reg_560, "tmp_2_reg_560");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ctrl3_reg_478, "ctrl3_reg_478");
    sc_trace(mVcdFile, coe1_reg_483, "coe1_reg_483");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, gmem_addr_1_reg_494, "gmem_addr_1_reg_494");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, exitcond_fu_345_p2, "exitcond_fu_345_p2");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_reg_500_pp0_iter1_reg, "exitcond_reg_500_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_next_fu_351_p2, "indvar_next_fu_351_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_10_fu_357_p1, "tmp_10_fu_357_p1");
    sc_trace(mVcdFile, tmp_10_reg_509, "tmp_10_reg_509");
    sc_trace(mVcdFile, tmp_10_reg_509_pp0_iter1_reg, "tmp_10_reg_509_pp0_iter1_reg");
    sc_trace(mVcdFile, fir_ctrl_0_reg_515, "fir_ctrl_0_reg_515");
    sc_trace(mVcdFile, fir_ctrl_1_1_fu_361_p3, "fir_ctrl_1_1_fu_361_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, reload_1_fu_367_p3, "reload_1_fu_367_p3");
    sc_trace(mVcdFile, tmp_fu_373_p2, "tmp_fu_373_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, p_add7_i32_shr_reg_535, "p_add7_i32_shr_reg_535");
    sc_trace(mVcdFile, tmp_s_fu_401_p1, "tmp_s_fu_401_p1");
    sc_trace(mVcdFile, exitcond1_fu_405_p2, "exitcond1_fu_405_p2");
    sc_trace(mVcdFile, exitcond1_reg_546_pp1_iter1_reg, "exitcond1_reg_546_pp1_iter1_reg");
    sc_trace(mVcdFile, indvar_next1_fu_410_p2, "indvar_next1_fu_410_p2");
    sc_trace(mVcdFile, indvar_next1_reg_550, "indvar_next1_reg_550");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_555, "gmem_addr_1_read_reg_555");
    sc_trace(mVcdFile, tmp_2_fu_421_p2, "tmp_2_fu_421_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_block_state24_pp2_stage0_iter0, "ap_block_state24_pp2_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state26_pp2_stage0_iter1, "ap_block_state26_pp2_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_11001, "ap_block_pp2_stage0_11001");
    sc_trace(mVcdFile, tmp_2_reg_560_pp2_iter1_reg, "tmp_2_reg_560_pp2_iter1_reg");
    sc_trace(mVcdFile, i_1_fu_427_p2, "i_1_fu_427_p2");
    sc_trace(mVcdFile, i_1_reg_564, "i_1_reg_564");
    sc_trace(mVcdFile, tmp_7_fu_438_p1, "tmp_7_fu_438_p1");
    sc_trace(mVcdFile, tmp_7_reg_574, "tmp_7_reg_574");
    sc_trace(mVcdFile, shift_reg_load_reg_584, "shift_reg_load_reg_584");
    sc_trace(mVcdFile, tmp_8_fu_443_p2, "tmp_8_fu_443_p2");
    sc_trace(mVcdFile, tmp_8_reg_589, "tmp_8_reg_589");
    sc_trace(mVcdFile, acc_2_fu_448_p2, "acc_2_fu_448_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, x_user_V_tmp_reg_599, "x_user_V_tmp_reg_599");
    sc_trace(mVcdFile, x_last_V_tmp_reg_604, "x_last_V_tmp_reg_604");
    sc_trace(mVcdFile, tmp_3_fu_466_p2, "tmp_3_fu_466_p2");
    sc_trace(mVcdFile, tmp_3_reg_609, "tmp_3_reg_609");
    sc_trace(mVcdFile, acc_1_fu_472_p2, "acc_1_fu_472_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state20, "ap_condition_pp1_exit_iter0_state20");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_block_pp2_stage0_subdone, "ap_block_pp2_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp2_exit_iter0_state24, "ap_condition_pp2_exit_iter0_state24");
    sc_trace(mVcdFile, ap_block_pp2_stage1_subdone, "ap_block_pp2_stage1_subdone");
    sc_trace(mVcdFile, ap_phi_mux_indvar1_phi_fu_272_p4, "ap_phi_mux_indvar1_phi_fu_272_p4");
    sc_trace(mVcdFile, ap_phi_mux_i1_phi_fu_283_p4, "ap_phi_mux_i1_phi_fu_283_p4");
    sc_trace(mVcdFile, ap_block_pp2_stage0, "ap_block_pp2_stage0");
    sc_trace(mVcdFile, indvar2_fu_416_p1, "indvar2_fu_416_p1");
    sc_trace(mVcdFile, tmp_6_fu_433_p1, "tmp_6_fu_433_p1");
    sc_trace(mVcdFile, ap_block_pp2_stage1, "ap_block_pp2_stage1");
    sc_trace(mVcdFile, tmp_5_fu_326_p1, "tmp_5_fu_326_p1");
    sc_trace(mVcdFile, tmp_9_fu_336_p1, "tmp_9_fu_336_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, tmp_12_fu_379_p2, "tmp_12_fu_379_p2");
    sc_trace(mVcdFile, tmp_1_fu_385_p2, "tmp_1_fu_385_p2");
    sc_trace(mVcdFile, tmp_3_fu_466_p1, "tmp_3_fu_466_p1");
    sc_trace(mVcdFile, ap_block_state32, "ap_block_state32");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_idle_pp2, "ap_idle_pp2");
    sc_trace(mVcdFile, ap_enable_pp2, "ap_enable_pp2");
#endif

    }
    mHdltvinHandle.open("x_order_fir.hdltvin.dat");
    mHdltvoutHandle.open("x_order_fir.hdltvout.dat");
}

x_order_fir::~x_order_fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete coef_U;
    delete shift_reg_U;
    delete x_order_fir_AXILiteS_s_axi_U;
    delete x_order_fir_gmem_m_axi_U;
}

void x_order_fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void x_order_fir::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_logic_0;
}

void x_order_fir::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv32_0;
}

void x_order_fir::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void x_order_fir::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void x_order_fir::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void x_order_fir::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void x_order_fir::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage1_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_560_pp2_iter1_reg.read()))) {
        acc_reg_290 = acc_2_fu_448_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        acc_reg_290 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state20.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state20.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state20.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state24.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp2_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp2_iter1 = ap_enable_reg_pp2_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
            ap_enable_reg_pp2_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_560.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()))) {
        i1_reg_280 = i_1_reg_564.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        i1_reg_280 = i_reg_233.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        indvar1_reg_268 = indvar_next1_reg_550.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        indvar1_reg_268 = ap_const_lv30_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_345_p2.read()))) {
        indvar_reg_257 = indvar_next_fu_351_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        indvar_reg_257 = ap_const_lv2_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_data_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_vld_out.read()))) {
            x_data_0_sel_rd =  (sc_logic) (~x_data_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_data_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_ack_in.read()))) {
            x_data_0_sel_wr =  (sc_logic) (~x_data_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_data_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, x_data_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, x_data_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, x_data_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, x_data_0_state.read())))) {
            x_data_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, x_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, x_data_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, x_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, x_data_0_state.read())))) {
            x_data_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, x_data_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, x_data_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, x_data_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, x_data_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, x_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_ack_out.read()))))) {
            x_data_0_state = ap_const_lv2_3;
        } else {
            x_data_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_vld_out.read()))) {
            x_last_V_0_sel_rd =  (sc_logic) (~x_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_ack_in.read()))) {
            x_last_V_0_sel_wr =  (sc_logic) (~x_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, x_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, x_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, x_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, x_last_V_0_state.read())))) {
            x_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, x_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, x_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, x_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, x_last_V_0_state.read())))) {
            x_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, x_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, x_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, x_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, x_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, x_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_ack_out.read()))))) {
            x_last_V_0_state = ap_const_lv2_3;
        } else {
            x_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_vld_out.read()))) {
            x_user_V_0_sel_rd =  (sc_logic) (~x_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_ack_in.read()))) {
            x_user_V_0_sel_wr =  (sc_logic) (~x_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        x_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, x_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, x_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, x_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, x_user_V_0_state.read())))) {
            x_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, x_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, x_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, x_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, x_user_V_0_state.read())))) {
            x_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, x_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, x_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, x_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, x_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, x_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_ack_out.read()))))) {
            x_user_V_0_state = ap_const_lv2_3;
        } else {
            x_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_data_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_vld_out.read()))) {
            y_data_1_sel_rd =  (sc_logic) (~y_data_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_data_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_ack_in.read()))) {
            y_data_1_sel_wr =  (sc_logic) (~y_data_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_data_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_ack_out.read()) && 
              esl_seteq<1,2,2>(y_data_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_vld_in.read()) && 
              esl_seteq<1,2,2>(y_data_1_state.read(), ap_const_lv2_2)))) {
            y_data_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(y_data_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(y_data_1_state.read(), ap_const_lv2_1)))) {
            y_data_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(y_data_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(y_data_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(y_data_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_ack_out.read()))))) {
            y_data_1_state = ap_const_lv2_3;
        } else {
            y_data_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_vld_out.read()))) {
            y_last_V_1_sel_rd =  (sc_logic) (~y_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_ack_in.read()))) {
            y_last_V_1_sel_wr =  (sc_logic) (~y_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, y_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, y_last_V_1_state.read())))) {
            y_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, y_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, y_last_V_1_state.read())))) {
            y_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, y_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, y_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, y_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_ack_out.read()))))) {
            y_last_V_1_state = ap_const_lv2_3;
        } else {
            y_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_vld_out.read()))) {
            y_user_V_1_sel_rd =  (sc_logic) (~y_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_ack_in.read()))) {
            y_user_V_1_sel_wr =  (sc_logic) (~y_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        y_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, y_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, y_user_V_1_state.read())))) {
            y_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, y_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, y_user_V_1_state.read())))) {
            y_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, y_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, y_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, y_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_ack_out.read()))))) {
            y_user_V_1_state = ap_const_lv2_3;
        } else {
            y_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        coe1_reg_483 = coe.read().range(31, 2);
        ctrl3_reg_478 = ctrl.read().range(31, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond1_reg_546 = exitcond1_fu_405_p2.read();
        exitcond1_reg_546_pp1_iter1_reg = exitcond1_reg_546.read();
        indvar1_reg_268_pp1_iter1_reg = indvar1_reg_268.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_500 = exitcond_fu_345_p2.read();
        exitcond_reg_500_pp0_iter1_reg = exitcond_reg_500.read();
        tmp_10_reg_509_pp0_iter1_reg = tmp_10_reg_509.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_500.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        fir_ctrl_0_reg_515 = gmem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        gmem_addr_1_read_reg_555 = gmem_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        gmem_addr_1_reg_494 =  (sc_lv<32>) (tmp_9_fu_336_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_421_p2.read()))) {
        i_1_reg_564 = i_1_fu_427_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_500_pp0_iter1_reg.read()))) {
        i_reg_233 = fir_ctrl_1_1_fu_361_p3.read();
        reload_reg_245 = reload_1_fu_367_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        indvar_next1_reg_550 = indvar_next1_fu_410_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_373_p2.read()))) {
        p_add7_i32_shr_reg_535 = tmp_1_fu_385_p2.read().range(31, 2);
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp2_stage1_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_560.read())) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        reg_302 = coef_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_560.read()))) {
        shift_reg_load_reg_584 = shift_reg_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_345_p2.read()))) {
        tmp_10_reg_509 = tmp_10_fu_357_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_2_reg_560 = tmp_2_fu_421_p2.read();
        tmp_2_reg_560_pp2_iter1_reg = tmp_2_reg_560.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(x_data_0_vld_out.read(), ap_const_logic_1))) {
        tmp_3_reg_609 = tmp_3_fu_466_p2.read();
        x_last_V_tmp_reg_604 = x_last_V_0_data_out.read();
        x_user_V_tmp_reg_599 = x_user_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_421_p2.read()))) {
        tmp_7_reg_574 = tmp_7_fu_438_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_560.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_8_reg_589 = tmp_8_fu_443_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_load_A.read())) {
        x_data_0_payload_A = x_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_load_B.read())) {
        x_data_0_payload_B = x_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_load_A.read())) {
        x_last_V_0_payload_A = x_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_load_B.read())) {
        x_last_V_0_payload_B = x_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_load_A.read())) {
        x_user_V_0_payload_A = x_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_load_B.read())) {
        x_user_V_0_payload_B = x_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_load_A.read())) {
        y_data_1_payload_A = acc_1_fu_472_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_load_B.read())) {
        y_data_1_payload_B = acc_1_fu_472_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_load_A.read())) {
        y_last_V_1_payload_A = x_last_V_tmp_reg_604.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_load_B.read())) {
        y_last_V_1_payload_B = x_last_V_tmp_reg_604.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_load_A.read())) {
        y_user_V_1_payload_A = x_user_V_tmp_reg_599.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_load_B.read())) {
        y_user_V_1_payload_B = x_user_V_tmp_reg_599.read();
    }
}

void x_order_fir::thread_acc_1_fu_472_p2() {
    acc_1_fu_472_p2 = (!tmp_3_reg_609.read().is_01() || !acc_reg_290.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_3_reg_609.read()) + sc_biguint<32>(acc_reg_290.read()));
}

void x_order_fir::thread_acc_2_fu_448_p2() {
    acc_2_fu_448_p2 = (!tmp_8_reg_589.read().is_01() || !acc_reg_290.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_8_reg_589.read()) + sc_biguint<32>(acc_reg_290.read()));
}

void x_order_fir::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void x_order_fir::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[17];
}

void x_order_fir::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read()[19];
}

void x_order_fir::thread_ap_CS_fsm_pp2_stage1() {
    ap_CS_fsm_pp2_stage1 = ap_CS_fsm.read()[20];
}

void x_order_fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void x_order_fir::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void x_order_fir::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[10];
}

void x_order_fir::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[16];
}

void x_order_fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void x_order_fir::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[18];
}

void x_order_fir::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[21];
}

void x_order_fir::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[22];
}

void x_order_fir::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[23];
}

void x_order_fir::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[24];
}

void x_order_fir::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[25];
}

void x_order_fir::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void x_order_fir::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_500.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void x_order_fir::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_500.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void x_order_fir::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void x_order_fir::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void x_order_fir::thread_ap_block_pp2_stage0() {
    ap_block_pp2_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_pp2_stage0_11001() {
    ap_block_pp2_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_pp2_stage0_subdone() {
    ap_block_pp2_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_pp2_stage1() {
    ap_block_pp2_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_pp2_stage1_11001() {
    ap_block_pp2_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_pp2_stage1_subdone() {
    ap_block_pp2_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_500.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void x_order_fir::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_state20_pp1_stage0_iter0() {
    ap_block_state20_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_state21_pp1_stage0_iter1() {
    ap_block_state21_pp1_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_RVALID.read()));
}

void x_order_fir::thread_ap_block_state22_pp1_stage0_iter2() {
    ap_block_state22_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_state24_pp2_stage0_iter0() {
    ap_block_state24_pp2_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_state25_pp2_stage1_iter0() {
    ap_block_state25_pp2_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_state26_pp2_stage0_iter1() {
    ap_block_state26_pp2_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_state27_pp2_stage1_iter1() {
    ap_block_state27_pp2_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_block_state32() {
    ap_block_state32 = (esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_ack_in.read()));
}

void x_order_fir::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void x_order_fir::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_345_p2.read())) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_condition_pp1_exit_iter0_state20() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_405_p2.read())) {
        ap_condition_pp1_exit_iter0_state20 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state20 = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_condition_pp2_exit_iter0_state24() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_421_p2.read())) {
        ap_condition_pp2_exit_iter0_state24 = ap_const_logic_1;
    } else {
        ap_condition_pp2_exit_iter0_state24 = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_state.read()[0]) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void x_order_fir::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void x_order_fir::thread_ap_enable_pp2() {
    ap_enable_pp2 = (ap_idle_pp2.read() ^ ap_const_logic_1);
}

void x_order_fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_idle_pp2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter1.read()))) {
        ap_idle_pp2 = ap_const_logic_1;
    } else {
        ap_idle_pp2 = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_phi_mux_i1_phi_fu_283_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_560.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i1_phi_fu_283_p4 = i_1_reg_564.read();
    } else {
        ap_phi_mux_i1_phi_fu_283_p4 = i1_reg_280.read();
    }
}

void x_order_fir::thread_ap_phi_mux_indvar1_phi_fu_272_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546.read()))) {
        ap_phi_mux_indvar1_phi_fu_272_p4 = indvar_next1_reg_550.read();
    } else {
        ap_phi_mux_indvar1_phi_fu_272_p4 = indvar1_reg_268.read();
    }
}

void x_order_fir::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_state.read()[0]) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void x_order_fir::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void x_order_fir::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void x_order_fir::thread_coef_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        coef_address0 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0))) {
        coef_address0 =  (sc_lv<10>) (tmp_7_fu_438_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()))) {
        coef_address0 =  (sc_lv<10>) (indvar2_fu_416_p1.read());
    } else {
        coef_address0 = "XXXXXXXXXX";
    }
}

void x_order_fir::thread_coef_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        coef_ce0 = ap_const_logic_1;
    } else {
        coef_ce0 = ap_const_logic_0;
    }
}

void x_order_fir::thread_coef_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546_pp1_iter1_reg.read()))) {
        coef_we0 = ap_const_logic_1;
    } else {
        coef_we0 = ap_const_logic_0;
    }
}

void x_order_fir::thread_exitcond1_fu_405_p2() {
    exitcond1_fu_405_p2 = (!ap_phi_mux_indvar1_phi_fu_272_p4.read().is_01() || !p_add7_i32_shr_reg_535.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar1_phi_fu_272_p4.read() == p_add7_i32_shr_reg_535.read());
}

void x_order_fir::thread_exitcond_fu_345_p2() {
    exitcond_fu_345_p2 = (!indvar_reg_257.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(indvar_reg_257.read() == ap_const_lv2_2);
}

void x_order_fir::thread_fir_ctrl_1_1_fu_361_p3() {
    fir_ctrl_1_1_fu_361_p3 = (!tmp_10_reg_509_pp0_iter1_reg.read()[0].is_01())? sc_lv<32>(): ((tmp_10_reg_509_pp0_iter1_reg.read()[0].to_bool())? fir_ctrl_0_reg_515.read(): i_reg_233.read());
}

void x_order_fir::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            gmem_ARADDR = gmem_addr_1_reg_494.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            gmem_ARADDR =  (sc_lv<32>) (tmp_5_fu_326_p1.read());
        } else {
            gmem_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        gmem_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void x_order_fir::thread_gmem_ARLEN() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            gmem_ARLEN = tmp_s_fu_401_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            gmem_ARLEN = ap_const_lv32_2;
        } else {
            gmem_ARLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        gmem_ARLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void x_order_fir::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void x_order_fir::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_500.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void x_order_fir::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void x_order_fir::thread_gmem_blk_n_R() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_500.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_546.read())))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void x_order_fir::thread_i_1_fu_427_p2() {
    i_1_fu_427_p2 = (!ap_phi_mux_i1_phi_fu_283_p4.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_bigint<32>(ap_phi_mux_i1_phi_fu_283_p4.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void x_order_fir::thread_indvar2_fu_416_p1() {
    indvar2_fu_416_p1 = esl_zext<64,30>(indvar1_reg_268_pp1_iter1_reg.read());
}

void x_order_fir::thread_indvar_next1_fu_410_p2() {
    indvar_next1_fu_410_p2 = (!ap_phi_mux_indvar1_phi_fu_272_p4.read().is_01() || !ap_const_lv30_1.is_01())? sc_lv<30>(): (sc_biguint<30>(ap_phi_mux_indvar1_phi_fu_272_p4.read()) + sc_biguint<30>(ap_const_lv30_1));
}

void x_order_fir::thread_indvar_next_fu_351_p2() {
    indvar_next_fu_351_p2 = (!indvar_reg_257.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(indvar_reg_257.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void x_order_fir::thread_reload_1_fu_367_p3() {
    reload_1_fu_367_p3 = (!tmp_10_reg_509_pp0_iter1_reg.read()[0].is_01())? sc_lv<32>(): ((tmp_10_reg_509_pp0_iter1_reg.read()[0].to_bool())? reload_reg_245.read(): fir_ctrl_0_reg_515.read());
}

void x_order_fir::thread_shift_reg_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        shift_reg_address0 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage1.read(), ap_const_boolean_0))) {
        shift_reg_address0 =  (sc_lv<10>) (tmp_7_reg_574.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0))) {
        shift_reg_address0 =  (sc_lv<10>) (tmp_6_fu_433_p1.read());
    } else {
        shift_reg_address0 = "XXXXXXXXXX";
    }
}

void x_order_fir::thread_shift_reg_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(x_data_0_vld_out.read(), ap_const_logic_1)))) {
        shift_reg_ce0 = ap_const_logic_1;
    } else {
        shift_reg_ce0 = ap_const_logic_0;
    }
}

void x_order_fir::thread_shift_reg_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        shift_reg_d0 = x_data_0_data_out.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage1.read(), ap_const_boolean_0))) {
        shift_reg_d0 = shift_reg_q0.read();
    } else {
        shift_reg_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void x_order_fir::thread_shift_reg_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_reg_560.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(x_data_0_vld_out.read(), ap_const_logic_1)))) {
        shift_reg_we0 = ap_const_logic_1;
    } else {
        shift_reg_we0 = ap_const_logic_0;
    }
}

void x_order_fir::thread_tmp_10_fu_357_p1() {
    tmp_10_fu_357_p1 = indvar_reg_257.read().range(1-1, 0);
}

void x_order_fir::thread_tmp_12_fu_379_p2() {
    tmp_12_fu_379_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): i_reg_233.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void x_order_fir::thread_tmp_1_fu_385_p2() {
    tmp_1_fu_385_p2 = (!ap_const_lv32_4.is_01() || !tmp_12_fu_379_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_4) + sc_biguint<32>(tmp_12_fu_379_p2.read()));
}

void x_order_fir::thread_tmp_2_fu_421_p2() {
    tmp_2_fu_421_p2 = (!ap_phi_mux_i1_phi_fu_283_p4.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i1_phi_fu_283_p4.read() == ap_const_lv32_0);
}

void x_order_fir::thread_tmp_3_fu_466_p1() {
    tmp_3_fu_466_p1 = x_data_0_data_out.read();
}

void x_order_fir::thread_tmp_3_fu_466_p2() {
    tmp_3_fu_466_p2 = (!reg_302.read().is_01() || !tmp_3_fu_466_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(reg_302.read()) * sc_bigint<32>(tmp_3_fu_466_p1.read());
}

void x_order_fir::thread_tmp_5_fu_326_p1() {
    tmp_5_fu_326_p1 = esl_zext<64,30>(ctrl3_reg_478.read());
}

void x_order_fir::thread_tmp_6_fu_433_p1() {
    tmp_6_fu_433_p1 = esl_sext<64,32>(i_1_fu_427_p2.read());
}

void x_order_fir::thread_tmp_7_fu_438_p1() {
    tmp_7_fu_438_p1 = esl_sext<64,32>(ap_phi_mux_i1_phi_fu_283_p4.read());
}

void x_order_fir::thread_tmp_8_fu_443_p2() {
    tmp_8_fu_443_p2 = (!reg_302.read().is_01() || !shift_reg_load_reg_584.read().is_01())? sc_lv<32>(): sc_bigint<32>(reg_302.read()) * sc_bigint<32>(shift_reg_load_reg_584.read());
}

void x_order_fir::thread_tmp_9_fu_336_p1() {
    tmp_9_fu_336_p1 = esl_zext<64,30>(coe1_reg_483.read());
}

void x_order_fir::thread_tmp_fu_373_p2() {
    tmp_fu_373_p2 = (!reload_reg_245.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(reload_reg_245.read() == ap_const_lv32_0);
}

void x_order_fir::thread_tmp_s_fu_401_p1() {
    tmp_s_fu_401_p1 = esl_zext<32,30>(p_add7_i32_shr_reg_535.read());
}

void x_order_fir::thread_x_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        x_TDATA_blk_n = x_data_0_state.read()[0];
    } else {
        x_TDATA_blk_n = ap_const_logic_1;
    }
}

void x_order_fir::thread_x_TREADY() {
    x_TREADY = x_last_V_0_state.read()[1];
}

void x_order_fir::thread_x_data_0_ack_in() {
    x_data_0_ack_in = x_data_0_state.read()[1];
}

void x_order_fir::thread_x_data_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(x_data_0_vld_out.read(), ap_const_logic_1))) {
        x_data_0_ack_out = ap_const_logic_1;
    } else {
        x_data_0_ack_out = ap_const_logic_0;
    }
}

void x_order_fir::thread_x_data_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_data_0_sel.read())) {
        x_data_0_data_out = x_data_0_payload_B.read();
    } else {
        x_data_0_data_out = x_data_0_payload_A.read();
    }
}

void x_order_fir::thread_x_data_0_load_A() {
    x_data_0_load_A = (x_data_0_state_cmp_full.read() & ~x_data_0_sel_wr.read());
}

void x_order_fir::thread_x_data_0_load_B() {
    x_data_0_load_B = (x_data_0_sel_wr.read() & x_data_0_state_cmp_full.read());
}

void x_order_fir::thread_x_data_0_sel() {
    x_data_0_sel = x_data_0_sel_rd.read();
}

void x_order_fir::thread_x_data_0_state_cmp_full() {
    x_data_0_state_cmp_full =  (sc_logic) ((!x_data_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(x_data_0_state.read() != ap_const_lv2_1))[0];
}

void x_order_fir::thread_x_data_0_vld_in() {
    x_data_0_vld_in = x_TVALID.read();
}

void x_order_fir::thread_x_data_0_vld_out() {
    x_data_0_vld_out = x_data_0_state.read()[0];
}

void x_order_fir::thread_x_last_V_0_ack_in() {
    x_last_V_0_ack_in = x_last_V_0_state.read()[1];
}

void x_order_fir::thread_x_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(x_data_0_vld_out.read(), ap_const_logic_1))) {
        x_last_V_0_ack_out = ap_const_logic_1;
    } else {
        x_last_V_0_ack_out = ap_const_logic_0;
    }
}

void x_order_fir::thread_x_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_last_V_0_sel.read())) {
        x_last_V_0_data_out = x_last_V_0_payload_B.read();
    } else {
        x_last_V_0_data_out = x_last_V_0_payload_A.read();
    }
}

void x_order_fir::thread_x_last_V_0_load_A() {
    x_last_V_0_load_A = (x_last_V_0_state_cmp_full.read() & ~x_last_V_0_sel_wr.read());
}

void x_order_fir::thread_x_last_V_0_load_B() {
    x_last_V_0_load_B = (x_last_V_0_sel_wr.read() & x_last_V_0_state_cmp_full.read());
}

void x_order_fir::thread_x_last_V_0_sel() {
    x_last_V_0_sel = x_last_V_0_sel_rd.read();
}

void x_order_fir::thread_x_last_V_0_state_cmp_full() {
    x_last_V_0_state_cmp_full =  (sc_logic) ((!x_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(x_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void x_order_fir::thread_x_last_V_0_vld_in() {
    x_last_V_0_vld_in = x_TVALID.read();
}

void x_order_fir::thread_x_last_V_0_vld_out() {
    x_last_V_0_vld_out = x_last_V_0_state.read()[0];
}

void x_order_fir::thread_x_user_V_0_ack_in() {
    x_user_V_0_ack_in = x_user_V_0_state.read()[1];
}

void x_order_fir::thread_x_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(x_data_0_vld_out.read(), ap_const_logic_1))) {
        x_user_V_0_ack_out = ap_const_logic_1;
    } else {
        x_user_V_0_ack_out = ap_const_logic_0;
    }
}

void x_order_fir::thread_x_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_user_V_0_sel.read())) {
        x_user_V_0_data_out = x_user_V_0_payload_B.read();
    } else {
        x_user_V_0_data_out = x_user_V_0_payload_A.read();
    }
}

void x_order_fir::thread_x_user_V_0_load_A() {
    x_user_V_0_load_A = (x_user_V_0_state_cmp_full.read() & ~x_user_V_0_sel_wr.read());
}

void x_order_fir::thread_x_user_V_0_load_B() {
    x_user_V_0_load_B = (x_user_V_0_sel_wr.read() & x_user_V_0_state_cmp_full.read());
}

void x_order_fir::thread_x_user_V_0_sel() {
    x_user_V_0_sel = x_user_V_0_sel_rd.read();
}

void x_order_fir::thread_x_user_V_0_state_cmp_full() {
    x_user_V_0_state_cmp_full =  (sc_logic) ((!x_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(x_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void x_order_fir::thread_x_user_V_0_vld_in() {
    x_user_V_0_vld_in = x_TVALID.read();
}

void x_order_fir::thread_x_user_V_0_vld_out() {
    x_user_V_0_vld_out = x_user_V_0_state.read()[0];
}

void x_order_fir::thread_y_TDATA() {
    y_TDATA = y_data_1_data_out.read();
}

void x_order_fir::thread_y_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        y_TDATA_blk_n = y_data_1_state.read()[1];
    } else {
        y_TDATA_blk_n = ap_const_logic_1;
    }
}

void x_order_fir::thread_y_TLAST() {
    y_TLAST = y_last_V_1_data_out.read();
}

void x_order_fir::thread_y_TUSER() {
    y_TUSER = y_user_V_1_data_out.read();
}

void x_order_fir::thread_y_TVALID() {
    y_TVALID = y_last_V_1_state.read()[0];
}

void x_order_fir::thread_y_data_1_ack_in() {
    y_data_1_ack_in = y_data_1_state.read()[1];
}

void x_order_fir::thread_y_data_1_ack_out() {
    y_data_1_ack_out = y_TREADY.read();
}

void x_order_fir::thread_y_data_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_data_1_sel.read())) {
        y_data_1_data_out = y_data_1_payload_B.read();
    } else {
        y_data_1_data_out = y_data_1_payload_A.read();
    }
}

void x_order_fir::thread_y_data_1_load_A() {
    y_data_1_load_A = (y_data_1_state_cmp_full.read() & ~y_data_1_sel_wr.read());
}

void x_order_fir::thread_y_data_1_load_B() {
    y_data_1_load_B = (y_data_1_sel_wr.read() & y_data_1_state_cmp_full.read());
}

void x_order_fir::thread_y_data_1_sel() {
    y_data_1_sel = y_data_1_sel_rd.read();
}

void x_order_fir::thread_y_data_1_state_cmp_full() {
    y_data_1_state_cmp_full =  (sc_logic) ((!y_data_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(y_data_1_state.read() != ap_const_lv2_1))[0];
}

void x_order_fir::thread_y_data_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && 
         esl_seteq<1,1,1>(y_data_1_ack_in.read(), ap_const_logic_1))) {
        y_data_1_vld_in = ap_const_logic_1;
    } else {
        y_data_1_vld_in = ap_const_logic_0;
    }
}

void x_order_fir::thread_y_data_1_vld_out() {
    y_data_1_vld_out = y_data_1_state.read()[0];
}

void x_order_fir::thread_y_last_V_1_ack_in() {
    y_last_V_1_ack_in = y_last_V_1_state.read()[1];
}

void x_order_fir::thread_y_last_V_1_ack_out() {
    y_last_V_1_ack_out = y_TREADY.read();
}

void x_order_fir::thread_y_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_last_V_1_sel.read())) {
        y_last_V_1_data_out = y_last_V_1_payload_B.read();
    } else {
        y_last_V_1_data_out = y_last_V_1_payload_A.read();
    }
}

void x_order_fir::thread_y_last_V_1_load_A() {
    y_last_V_1_load_A = (y_last_V_1_state_cmp_full.read() & ~y_last_V_1_sel_wr.read());
}

void x_order_fir::thread_y_last_V_1_load_B() {
    y_last_V_1_load_B = (y_last_V_1_sel_wr.read() & y_last_V_1_state_cmp_full.read());
}

void x_order_fir::thread_y_last_V_1_sel() {
    y_last_V_1_sel = y_last_V_1_sel_rd.read();
}

void x_order_fir::thread_y_last_V_1_state_cmp_full() {
    y_last_V_1_state_cmp_full =  (sc_logic) ((!y_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(y_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void x_order_fir::thread_y_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && 
         esl_seteq<1,1,1>(y_data_1_ack_in.read(), ap_const_logic_1))) {
        y_last_V_1_vld_in = ap_const_logic_1;
    } else {
        y_last_V_1_vld_in = ap_const_logic_0;
    }
}

void x_order_fir::thread_y_last_V_1_vld_out() {
    y_last_V_1_vld_out = y_last_V_1_state.read()[0];
}

void x_order_fir::thread_y_user_V_1_ack_in() {
    y_user_V_1_ack_in = y_user_V_1_state.read()[1];
}

void x_order_fir::thread_y_user_V_1_ack_out() {
    y_user_V_1_ack_out = y_TREADY.read();
}

void x_order_fir::thread_y_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, y_user_V_1_sel.read())) {
        y_user_V_1_data_out = y_user_V_1_payload_B.read();
    } else {
        y_user_V_1_data_out = y_user_V_1_payload_A.read();
    }
}

void x_order_fir::thread_y_user_V_1_load_A() {
    y_user_V_1_load_A = (y_user_V_1_state_cmp_full.read() & ~y_user_V_1_sel_wr.read());
}

void x_order_fir::thread_y_user_V_1_load_B() {
    y_user_V_1_load_B = (y_user_V_1_sel_wr.read() & y_user_V_1_state_cmp_full.read());
}

void x_order_fir::thread_y_user_V_1_sel() {
    y_user_V_1_sel = y_user_V_1_sel_rd.read();
}

void x_order_fir::thread_y_user_V_1_state_cmp_full() {
    y_user_V_1_state_cmp_full =  (sc_logic) ((!y_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(y_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void x_order_fir::thread_y_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && 
         esl_seteq<1,1,1>(y_data_1_ack_in.read(), ap_const_logic_1))) {
        y_user_V_1_vld_in = ap_const_logic_1;
    } else {
        y_user_V_1_vld_in = ap_const_logic_0;
    }
}

void x_order_fir::thread_y_user_V_1_vld_out() {
    y_user_V_1_vld_out = y_user_V_1_state.read()[0];
}

void x_order_fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_345_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_345_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_373_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 131072 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_405_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_405_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_421_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_421_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            }
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_block_pp2_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            }
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(x_data_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && esl_seteq<1,1,1>(y_data_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state32;
            } else {
                ap_NS_fsm = ap_ST_fsm_state31;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_state.read()[0]) && !(esl_seteq<1,1,1>(ap_const_logic_0, y_data_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, y_last_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state32;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void x_order_fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TDATA\" :  \"" << y_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TVALID\" :  \"" << y_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y_TREADY\" :  \"" << y_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TUSER\" :  \"" << y_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_TLAST\" :  \"" << y_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TDATA\" :  \"" << x_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TVALID\" :  \"" << x_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_TREADY\" :  \"" << x_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TUSER\" :  \"" << x_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_TLAST\" :  \"" << x_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

