// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _x_order_fir_HH_
#define _x_order_fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "x_order_fir_coef.h"
#include "x_order_fir_AXILiteS_s_axi.h"
#include "x_order_fir_gmem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_GMEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct x_order_fir : public sc_module {
    // Port declarations 75
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_gmem_AWVALID;
    sc_in< sc_logic > m_axi_gmem_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_AWID;
    sc_out< sc_lv<8> > m_axi_gmem_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_AWUSER_WIDTH> > m_axi_gmem_AWUSER;
    sc_out< sc_logic > m_axi_gmem_WVALID;
    sc_in< sc_logic > m_axi_gmem_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH/8> > m_axi_gmem_WSTRB;
    sc_out< sc_logic > m_axi_gmem_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_WID;
    sc_out< sc_uint<C_M_AXI_GMEM_WUSER_WIDTH> > m_axi_gmem_WUSER;
    sc_out< sc_logic > m_axi_gmem_ARVALID;
    sc_in< sc_logic > m_axi_gmem_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_ARID;
    sc_out< sc_lv<8> > m_axi_gmem_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_ARUSER_WIDTH> > m_axi_gmem_ARUSER;
    sc_in< sc_logic > m_axi_gmem_RVALID;
    sc_out< sc_logic > m_axi_gmem_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_RDATA;
    sc_in< sc_logic > m_axi_gmem_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_RID;
    sc_in< sc_uint<C_M_AXI_GMEM_RUSER_WIDTH> > m_axi_gmem_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem_RRESP;
    sc_in< sc_logic > m_axi_gmem_BVALID;
    sc_out< sc_logic > m_axi_gmem_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_BID;
    sc_in< sc_uint<C_M_AXI_GMEM_BUSER_WIDTH> > m_axi_gmem_BUSER;
    sc_out< sc_lv<32> > y_TDATA;
    sc_out< sc_logic > y_TVALID;
    sc_in< sc_logic > y_TREADY;
    sc_out< sc_lv<1> > y_TUSER;
    sc_out< sc_lv<1> > y_TLAST;
    sc_in< sc_lv<32> > x_TDATA;
    sc_in< sc_logic > x_TVALID;
    sc_out< sc_logic > x_TREADY;
    sc_in< sc_lv<1> > x_TUSER;
    sc_in< sc_lv<1> > x_TLAST;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const5;
    sc_signal< sc_lv<32> > ap_var_for_const6;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<2> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const2;
    sc_signal< sc_lv<4> > ap_var_for_const4;


    // Module declarations
    x_order_fir(sc_module_name name);
    SC_HAS_PROCESS(x_order_fir);

    ~x_order_fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    x_order_fir_coef* coef_U;
    x_order_fir_coef* shift_reg_U;
    x_order_fir_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* x_order_fir_AXILiteS_s_axi_U;
    x_order_fir_gmem_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>* x_order_fir_gmem_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<26> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > y_data_1_data_out;
    sc_signal< sc_logic > y_data_1_vld_in;
    sc_signal< sc_logic > y_data_1_vld_out;
    sc_signal< sc_logic > y_data_1_ack_in;
    sc_signal< sc_logic > y_data_1_ack_out;
    sc_signal< sc_lv<32> > y_data_1_payload_A;
    sc_signal< sc_lv<32> > y_data_1_payload_B;
    sc_signal< sc_logic > y_data_1_sel_rd;
    sc_signal< sc_logic > y_data_1_sel_wr;
    sc_signal< sc_logic > y_data_1_sel;
    sc_signal< sc_logic > y_data_1_load_A;
    sc_signal< sc_logic > y_data_1_load_B;
    sc_signal< sc_lv<2> > y_data_1_state;
    sc_signal< sc_logic > y_data_1_state_cmp_full;
    sc_signal< sc_lv<1> > y_user_V_1_data_out;
    sc_signal< sc_logic > y_user_V_1_vld_in;
    sc_signal< sc_logic > y_user_V_1_vld_out;
    sc_signal< sc_logic > y_user_V_1_ack_in;
    sc_signal< sc_logic > y_user_V_1_ack_out;
    sc_signal< sc_lv<1> > y_user_V_1_payload_A;
    sc_signal< sc_lv<1> > y_user_V_1_payload_B;
    sc_signal< sc_logic > y_user_V_1_sel_rd;
    sc_signal< sc_logic > y_user_V_1_sel_wr;
    sc_signal< sc_logic > y_user_V_1_sel;
    sc_signal< sc_logic > y_user_V_1_load_A;
    sc_signal< sc_logic > y_user_V_1_load_B;
    sc_signal< sc_lv<2> > y_user_V_1_state;
    sc_signal< sc_logic > y_user_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > y_last_V_1_data_out;
    sc_signal< sc_logic > y_last_V_1_vld_in;
    sc_signal< sc_logic > y_last_V_1_vld_out;
    sc_signal< sc_logic > y_last_V_1_ack_in;
    sc_signal< sc_logic > y_last_V_1_ack_out;
    sc_signal< sc_lv<1> > y_last_V_1_payload_A;
    sc_signal< sc_lv<1> > y_last_V_1_payload_B;
    sc_signal< sc_logic > y_last_V_1_sel_rd;
    sc_signal< sc_logic > y_last_V_1_sel_wr;
    sc_signal< sc_logic > y_last_V_1_sel;
    sc_signal< sc_logic > y_last_V_1_load_A;
    sc_signal< sc_logic > y_last_V_1_load_B;
    sc_signal< sc_lv<2> > y_last_V_1_state;
    sc_signal< sc_logic > y_last_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > x_data_0_data_out;
    sc_signal< sc_logic > x_data_0_vld_in;
    sc_signal< sc_logic > x_data_0_vld_out;
    sc_signal< sc_logic > x_data_0_ack_in;
    sc_signal< sc_logic > x_data_0_ack_out;
    sc_signal< sc_lv<32> > x_data_0_payload_A;
    sc_signal< sc_lv<32> > x_data_0_payload_B;
    sc_signal< sc_logic > x_data_0_sel_rd;
    sc_signal< sc_logic > x_data_0_sel_wr;
    sc_signal< sc_logic > x_data_0_sel;
    sc_signal< sc_logic > x_data_0_load_A;
    sc_signal< sc_logic > x_data_0_load_B;
    sc_signal< sc_lv<2> > x_data_0_state;
    sc_signal< sc_logic > x_data_0_state_cmp_full;
    sc_signal< sc_lv<1> > x_user_V_0_data_out;
    sc_signal< sc_logic > x_user_V_0_vld_in;
    sc_signal< sc_logic > x_user_V_0_vld_out;
    sc_signal< sc_logic > x_user_V_0_ack_in;
    sc_signal< sc_logic > x_user_V_0_ack_out;
    sc_signal< sc_lv<1> > x_user_V_0_payload_A;
    sc_signal< sc_lv<1> > x_user_V_0_payload_B;
    sc_signal< sc_logic > x_user_V_0_sel_rd;
    sc_signal< sc_logic > x_user_V_0_sel_wr;
    sc_signal< sc_logic > x_user_V_0_sel;
    sc_signal< sc_logic > x_user_V_0_load_A;
    sc_signal< sc_logic > x_user_V_0_load_B;
    sc_signal< sc_lv<2> > x_user_V_0_state;
    sc_signal< sc_logic > x_user_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > x_last_V_0_data_out;
    sc_signal< sc_logic > x_last_V_0_vld_in;
    sc_signal< sc_logic > x_last_V_0_vld_out;
    sc_signal< sc_logic > x_last_V_0_ack_in;
    sc_signal< sc_logic > x_last_V_0_ack_out;
    sc_signal< sc_lv<1> > x_last_V_0_payload_A;
    sc_signal< sc_lv<1> > x_last_V_0_payload_B;
    sc_signal< sc_logic > x_last_V_0_sel_rd;
    sc_signal< sc_logic > x_last_V_0_sel_wr;
    sc_signal< sc_logic > x_last_V_0_sel;
    sc_signal< sc_logic > x_last_V_0_load_A;
    sc_signal< sc_logic > x_last_V_0_load_B;
    sc_signal< sc_lv<2> > x_last_V_0_state;
    sc_signal< sc_logic > x_last_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > coe;
    sc_signal< sc_lv<32> > ctrl;
    sc_signal< sc_lv<10> > coef_address0;
    sc_signal< sc_logic > coef_ce0;
    sc_signal< sc_logic > coef_we0;
    sc_signal< sc_lv<32> > coef_q0;
    sc_signal< sc_lv<10> > shift_reg_address0;
    sc_signal< sc_logic > shift_reg_ce0;
    sc_signal< sc_logic > shift_reg_we0;
    sc_signal< sc_lv<32> > shift_reg_d0;
    sc_signal< sc_lv<32> > shift_reg_q0;
    sc_signal< sc_logic > gmem_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > gmem_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_500;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > exitcond1_reg_546;
    sc_signal< sc_logic > y_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state31;
    sc_signal< sc_logic > ap_CS_fsm_state32;
    sc_signal< sc_logic > x_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state30;
    sc_signal< sc_logic > gmem_AWREADY;
    sc_signal< sc_logic > gmem_WREADY;
    sc_signal< sc_logic > gmem_ARVALID;
    sc_signal< sc_logic > gmem_ARREADY;
    sc_signal< sc_lv<32> > gmem_ARADDR;
    sc_signal< sc_lv<32> > gmem_ARLEN;
    sc_signal< sc_logic > gmem_RVALID;
    sc_signal< sc_logic > gmem_RREADY;
    sc_signal< sc_lv<32> > gmem_RDATA;
    sc_signal< sc_logic > gmem_RLAST;
    sc_signal< sc_lv<1> > gmem_RID;
    sc_signal< sc_lv<1> > gmem_RUSER;
    sc_signal< sc_lv<2> > gmem_RRESP;
    sc_signal< sc_logic > gmem_BVALID;
    sc_signal< sc_lv<2> > gmem_BRESP;
    sc_signal< sc_lv<1> > gmem_BID;
    sc_signal< sc_lv<1> > gmem_BUSER;
    sc_signal< sc_lv<32> > i_reg_233;
    sc_signal< sc_lv<32> > reload_reg_245;
    sc_signal< sc_lv<2> > indvar_reg_257;
    sc_signal< sc_lv<30> > indvar1_reg_268;
    sc_signal< sc_lv<30> > indvar1_reg_268_pp1_iter1_reg;
    sc_signal< bool > ap_block_state20_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state21_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state22_pp1_stage0_iter2;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<32> > i1_reg_280;
    sc_signal< sc_lv<32> > acc_reg_290;
    sc_signal< sc_lv<32> > reg_302;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< bool > ap_block_state25_pp2_stage1_iter0;
    sc_signal< bool > ap_block_state27_pp2_stage1_iter1;
    sc_signal< bool > ap_block_pp2_stage1_11001;
    sc_signal< sc_lv<1> > tmp_2_reg_560;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_lv<30> > ctrl3_reg_478;
    sc_signal< sc_lv<30> > coe1_reg_483;
    sc_signal< sc_logic > ap_sig_ioackin_gmem_ARREADY;
    sc_signal< sc_lv<32> > gmem_addr_1_reg_494;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > exitcond_fu_345_p2;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_reg_500_pp0_iter1_reg;
    sc_signal< sc_lv<2> > indvar_next_fu_351_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_10_fu_357_p1;
    sc_signal< sc_lv<1> > tmp_10_reg_509;
    sc_signal< sc_lv<1> > tmp_10_reg_509_pp0_iter1_reg;
    sc_signal< sc_lv<32> > fir_ctrl_0_reg_515;
    sc_signal< sc_lv<32> > fir_ctrl_1_1_fu_361_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<32> > reload_1_fu_367_p3;
    sc_signal< sc_lv<1> > tmp_fu_373_p2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<30> > p_add7_i32_shr_reg_535;
    sc_signal< sc_lv<32> > tmp_s_fu_401_p1;
    sc_signal< sc_lv<1> > exitcond1_fu_405_p2;
    sc_signal< sc_lv<1> > exitcond1_reg_546_pp1_iter1_reg;
    sc_signal< sc_lv<30> > indvar_next1_fu_410_p2;
    sc_signal< sc_lv<30> > indvar_next1_reg_550;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<32> > gmem_addr_1_read_reg_555;
    sc_signal< sc_lv<1> > tmp_2_fu_421_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< bool > ap_block_state24_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state26_pp2_stage0_iter1;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<1> > tmp_2_reg_560_pp2_iter1_reg;
    sc_signal< sc_lv<32> > i_1_fu_427_p2;
    sc_signal< sc_lv<32> > i_1_reg_564;
    sc_signal< sc_lv<64> > tmp_7_fu_438_p1;
    sc_signal< sc_lv<64> > tmp_7_reg_574;
    sc_signal< sc_lv<32> > shift_reg_load_reg_584;
    sc_signal< sc_lv<32> > tmp_8_fu_443_p2;
    sc_signal< sc_lv<32> > tmp_8_reg_589;
    sc_signal< sc_lv<32> > acc_2_fu_448_p2;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< sc_lv<1> > x_user_V_tmp_reg_599;
    sc_signal< sc_lv<1> > x_last_V_tmp_reg_604;
    sc_signal< sc_lv<32> > tmp_3_fu_466_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_609;
    sc_signal< sc_lv<32> > acc_1_fu_472_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state20;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state24;
    sc_signal< bool > ap_block_pp2_stage1_subdone;
    sc_signal< sc_lv<30> > ap_phi_mux_indvar1_phi_fu_272_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_i1_phi_fu_283_p4;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<64> > indvar2_fu_416_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_433_p1;
    sc_signal< bool > ap_block_pp2_stage1;
    sc_signal< sc_lv<64> > tmp_5_fu_326_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_336_p1;
    sc_signal< sc_logic > ap_reg_ioackin_gmem_ARREADY;
    sc_signal< sc_logic > ap_CS_fsm_state28;
    sc_signal< sc_lv<32> > tmp_12_fu_379_p2;
    sc_signal< sc_lv<32> > tmp_1_fu_385_p2;
    sc_signal< sc_lv<32> > tmp_3_fu_466_p1;
    sc_signal< bool > ap_block_state32;
    sc_signal< sc_lv<26> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<26> ap_ST_fsm_state1;
    static const sc_lv<26> ap_ST_fsm_state2;
    static const sc_lv<26> ap_ST_fsm_state3;
    static const sc_lv<26> ap_ST_fsm_state4;
    static const sc_lv<26> ap_ST_fsm_state5;
    static const sc_lv<26> ap_ST_fsm_state6;
    static const sc_lv<26> ap_ST_fsm_state7;
    static const sc_lv<26> ap_ST_fsm_state8;
    static const sc_lv<26> ap_ST_fsm_pp0_stage0;
    static const sc_lv<26> ap_ST_fsm_state12;
    static const sc_lv<26> ap_ST_fsm_state13;
    static const sc_lv<26> ap_ST_fsm_state14;
    static const sc_lv<26> ap_ST_fsm_state15;
    static const sc_lv<26> ap_ST_fsm_state16;
    static const sc_lv<26> ap_ST_fsm_state17;
    static const sc_lv<26> ap_ST_fsm_state18;
    static const sc_lv<26> ap_ST_fsm_state19;
    static const sc_lv<26> ap_ST_fsm_pp1_stage0;
    static const sc_lv<26> ap_ST_fsm_state23;
    static const sc_lv<26> ap_ST_fsm_pp2_stage0;
    static const sc_lv<26> ap_ST_fsm_pp2_stage1;
    static const sc_lv<26> ap_ST_fsm_state28;
    static const sc_lv<26> ap_ST_fsm_state29;
    static const sc_lv<26> ap_ST_fsm_state30;
    static const sc_lv<26> ap_ST_fsm_state31;
    static const sc_lv<26> ap_ST_fsm_state32;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_17;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_GMEM_USER_VALUE;
    static const int C_M_AXI_GMEM_PROT_VALUE;
    static const int C_M_AXI_GMEM_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<30> ap_const_lv30_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<30> ap_const_lv30_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const4();
    void thread_ap_clk_no_reset_();
    void thread_acc_1_fu_472_p2();
    void thread_acc_2_fu_448_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_pp2_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state28();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state30();
    void thread_ap_CS_fsm_state31();
    void thread_ap_CS_fsm_state32();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_pp2_stage1();
    void thread_ap_block_pp2_stage1_11001();
    void thread_ap_block_pp2_stage1_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state20_pp1_stage0_iter0();
    void thread_ap_block_state21_pp1_stage0_iter1();
    void thread_ap_block_state22_pp1_stage0_iter2();
    void thread_ap_block_state24_pp2_stage0_iter0();
    void thread_ap_block_state25_pp2_stage1_iter0();
    void thread_ap_block_state26_pp2_stage0_iter1();
    void thread_ap_block_state27_pp2_stage1_iter1();
    void thread_ap_block_state32();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_condition_pp1_exit_iter0_state20();
    void thread_ap_condition_pp2_exit_iter0_state24();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_phi_mux_i1_phi_fu_283_p4();
    void thread_ap_phi_mux_indvar1_phi_fu_272_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_gmem_ARREADY();
    void thread_coef_address0();
    void thread_coef_ce0();
    void thread_coef_we0();
    void thread_exitcond1_fu_405_p2();
    void thread_exitcond_fu_345_p2();
    void thread_fir_ctrl_1_1_fu_361_p3();
    void thread_gmem_ARADDR();
    void thread_gmem_ARLEN();
    void thread_gmem_ARVALID();
    void thread_gmem_RREADY();
    void thread_gmem_blk_n_AR();
    void thread_gmem_blk_n_R();
    void thread_i_1_fu_427_p2();
    void thread_indvar2_fu_416_p1();
    void thread_indvar_next1_fu_410_p2();
    void thread_indvar_next_fu_351_p2();
    void thread_reload_1_fu_367_p3();
    void thread_shift_reg_address0();
    void thread_shift_reg_ce0();
    void thread_shift_reg_d0();
    void thread_shift_reg_we0();
    void thread_tmp_10_fu_357_p1();
    void thread_tmp_12_fu_379_p2();
    void thread_tmp_1_fu_385_p2();
    void thread_tmp_2_fu_421_p2();
    void thread_tmp_3_fu_466_p1();
    void thread_tmp_3_fu_466_p2();
    void thread_tmp_5_fu_326_p1();
    void thread_tmp_6_fu_433_p1();
    void thread_tmp_7_fu_438_p1();
    void thread_tmp_8_fu_443_p2();
    void thread_tmp_9_fu_336_p1();
    void thread_tmp_fu_373_p2();
    void thread_tmp_s_fu_401_p1();
    void thread_x_TDATA_blk_n();
    void thread_x_TREADY();
    void thread_x_data_0_ack_in();
    void thread_x_data_0_ack_out();
    void thread_x_data_0_data_out();
    void thread_x_data_0_load_A();
    void thread_x_data_0_load_B();
    void thread_x_data_0_sel();
    void thread_x_data_0_state_cmp_full();
    void thread_x_data_0_vld_in();
    void thread_x_data_0_vld_out();
    void thread_x_last_V_0_ack_in();
    void thread_x_last_V_0_ack_out();
    void thread_x_last_V_0_data_out();
    void thread_x_last_V_0_load_A();
    void thread_x_last_V_0_load_B();
    void thread_x_last_V_0_sel();
    void thread_x_last_V_0_state_cmp_full();
    void thread_x_last_V_0_vld_in();
    void thread_x_last_V_0_vld_out();
    void thread_x_user_V_0_ack_in();
    void thread_x_user_V_0_ack_out();
    void thread_x_user_V_0_data_out();
    void thread_x_user_V_0_load_A();
    void thread_x_user_V_0_load_B();
    void thread_x_user_V_0_sel();
    void thread_x_user_V_0_state_cmp_full();
    void thread_x_user_V_0_vld_in();
    void thread_x_user_V_0_vld_out();
    void thread_y_TDATA();
    void thread_y_TDATA_blk_n();
    void thread_y_TLAST();
    void thread_y_TUSER();
    void thread_y_TVALID();
    void thread_y_data_1_ack_in();
    void thread_y_data_1_ack_out();
    void thread_y_data_1_data_out();
    void thread_y_data_1_load_A();
    void thread_y_data_1_load_B();
    void thread_y_data_1_sel();
    void thread_y_data_1_state_cmp_full();
    void thread_y_data_1_vld_in();
    void thread_y_data_1_vld_out();
    void thread_y_last_V_1_ack_in();
    void thread_y_last_V_1_ack_out();
    void thread_y_last_V_1_data_out();
    void thread_y_last_V_1_load_A();
    void thread_y_last_V_1_load_B();
    void thread_y_last_V_1_sel();
    void thread_y_last_V_1_state_cmp_full();
    void thread_y_last_V_1_vld_in();
    void thread_y_last_V_1_vld_out();
    void thread_y_user_V_1_ack_in();
    void thread_y_user_V_1_ack_out();
    void thread_y_user_V_1_data_out();
    void thread_y_user_V_1_load_A();
    void thread_y_user_V_1_load_B();
    void thread_y_user_V_1_sel();
    void thread_y_user_V_1_state_cmp_full();
    void thread_y_user_V_1_vld_in();
    void thread_y_user_V_1_vld_out();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
