// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="x_order_fir,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=6,HLS_SYN_FF=1457,HLS_SYN_LUT=1710,HLS_VERSION=2018_3}" *)

module x_order_fir (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        y_TDATA,
        y_TVALID,
        y_TREADY,
        y_TUSER,
        y_TLAST,
        x_TDATA,
        x_TVALID,
        x_TREADY,
        x_TUSER,
        x_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_pp0_stage0 = 26'd256;
parameter    ap_ST_fsm_state12 = 26'd512;
parameter    ap_ST_fsm_state13 = 26'd1024;
parameter    ap_ST_fsm_state14 = 26'd2048;
parameter    ap_ST_fsm_state15 = 26'd4096;
parameter    ap_ST_fsm_state16 = 26'd8192;
parameter    ap_ST_fsm_state17 = 26'd16384;
parameter    ap_ST_fsm_state18 = 26'd32768;
parameter    ap_ST_fsm_state19 = 26'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 26'd131072;
parameter    ap_ST_fsm_state23 = 26'd262144;
parameter    ap_ST_fsm_pp2_stage0 = 26'd524288;
parameter    ap_ST_fsm_pp2_stage1 = 26'd1048576;
parameter    ap_ST_fsm_state28 = 26'd2097152;
parameter    ap_ST_fsm_state29 = 26'd4194304;
parameter    ap_ST_fsm_state30 = 26'd8388608;
parameter    ap_ST_fsm_state31 = 26'd16777216;
parameter    ap_ST_fsm_state32 = 26'd33554432;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] y_TDATA;
output   y_TVALID;
input   y_TREADY;
output  [0:0] y_TUSER;
output  [0:0] y_TLAST;
input  [31:0] x_TDATA;
input   x_TVALID;
output   x_TREADY;
input  [0:0] x_TUSER;
input  [0:0] x_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] y_data_1_data_out;
reg    y_data_1_vld_in;
wire    y_data_1_vld_out;
wire    y_data_1_ack_in;
wire    y_data_1_ack_out;
reg   [31:0] y_data_1_payload_A;
reg   [31:0] y_data_1_payload_B;
reg    y_data_1_sel_rd;
reg    y_data_1_sel_wr;
wire    y_data_1_sel;
wire    y_data_1_load_A;
wire    y_data_1_load_B;
reg   [1:0] y_data_1_state;
wire    y_data_1_state_cmp_full;
reg   [0:0] y_user_V_1_data_out;
reg    y_user_V_1_vld_in;
wire    y_user_V_1_vld_out;
wire    y_user_V_1_ack_in;
wire    y_user_V_1_ack_out;
reg   [0:0] y_user_V_1_payload_A;
reg   [0:0] y_user_V_1_payload_B;
reg    y_user_V_1_sel_rd;
reg    y_user_V_1_sel_wr;
wire    y_user_V_1_sel;
wire    y_user_V_1_load_A;
wire    y_user_V_1_load_B;
reg   [1:0] y_user_V_1_state;
wire    y_user_V_1_state_cmp_full;
reg   [0:0] y_last_V_1_data_out;
reg    y_last_V_1_vld_in;
wire    y_last_V_1_vld_out;
wire    y_last_V_1_ack_in;
wire    y_last_V_1_ack_out;
reg   [0:0] y_last_V_1_payload_A;
reg   [0:0] y_last_V_1_payload_B;
reg    y_last_V_1_sel_rd;
reg    y_last_V_1_sel_wr;
wire    y_last_V_1_sel;
wire    y_last_V_1_load_A;
wire    y_last_V_1_load_B;
reg   [1:0] y_last_V_1_state;
wire    y_last_V_1_state_cmp_full;
reg   [31:0] x_data_0_data_out;
wire    x_data_0_vld_in;
wire    x_data_0_vld_out;
wire    x_data_0_ack_in;
reg    x_data_0_ack_out;
reg   [31:0] x_data_0_payload_A;
reg   [31:0] x_data_0_payload_B;
reg    x_data_0_sel_rd;
reg    x_data_0_sel_wr;
wire    x_data_0_sel;
wire    x_data_0_load_A;
wire    x_data_0_load_B;
reg   [1:0] x_data_0_state;
wire    x_data_0_state_cmp_full;
reg   [0:0] x_user_V_0_data_out;
wire    x_user_V_0_vld_in;
wire    x_user_V_0_vld_out;
wire    x_user_V_0_ack_in;
reg    x_user_V_0_ack_out;
reg   [0:0] x_user_V_0_payload_A;
reg   [0:0] x_user_V_0_payload_B;
reg    x_user_V_0_sel_rd;
reg    x_user_V_0_sel_wr;
wire    x_user_V_0_sel;
wire    x_user_V_0_load_A;
wire    x_user_V_0_load_B;
reg   [1:0] x_user_V_0_state;
wire    x_user_V_0_state_cmp_full;
reg   [0:0] x_last_V_0_data_out;
wire    x_last_V_0_vld_in;
wire    x_last_V_0_vld_out;
wire    x_last_V_0_ack_in;
reg    x_last_V_0_ack_out;
reg   [0:0] x_last_V_0_payload_A;
reg   [0:0] x_last_V_0_payload_B;
reg    x_last_V_0_sel_rd;
reg    x_last_V_0_sel_wr;
wire    x_last_V_0_sel;
wire    x_last_V_0_load_A;
wire    x_last_V_0_load_B;
reg   [1:0] x_last_V_0_state;
wire    x_last_V_0_state_cmp_full;
wire   [31:0] coe;
wire   [31:0] ctrl;
reg   [9:0] coef_address0;
reg    coef_ce0;
reg    coef_we0;
wire   [31:0] coef_q0;
reg   [9:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_500;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond1_reg_546;
reg    y_TDATA_blk_n;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
reg    x_TDATA_blk_n;
wire    ap_CS_fsm_state30;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] i_reg_233;
reg   [31:0] reload_reg_245;
reg   [1:0] indvar_reg_257;
reg   [29:0] indvar1_reg_268;
reg   [29:0] indvar1_reg_268_pp1_iter1_reg;
wire    ap_block_state20_pp1_stage0_iter0;
reg    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg  signed [31:0] i1_reg_280;
reg   [31:0] acc_reg_290;
reg  signed [31:0] reg_302;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state25_pp2_stage1_iter0;
wire    ap_block_state27_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] tmp_2_reg_560;
wire    ap_CS_fsm_state29;
reg   [29:0] ctrl3_reg_478;
reg   [29:0] coe1_reg_483;
reg    ap_sig_ioackin_gmem_ARREADY;
reg   [31:0] gmem_addr_1_reg_494;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_fu_345_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_500_pp0_iter1_reg;
wire   [1:0] indvar_next_fu_351_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_10_fu_357_p1;
reg   [0:0] tmp_10_reg_509;
reg   [0:0] tmp_10_reg_509_pp0_iter1_reg;
reg   [31:0] fir_ctrl_0_reg_515;
wire   [31:0] fir_ctrl_1_1_fu_361_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] reload_1_fu_367_p3;
wire   [0:0] tmp_fu_373_p2;
wire    ap_CS_fsm_state12;
reg   [29:0] p_add7_i32_shr_reg_535;
wire   [31:0] tmp_s_fu_401_p1;
wire   [0:0] exitcond1_fu_405_p2;
reg   [0:0] exitcond1_reg_546_pp1_iter1_reg;
wire   [29:0] indvar_next1_fu_410_p2;
reg   [29:0] indvar_next1_reg_550;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] gmem_addr_1_read_reg_555;
wire   [0:0] tmp_2_fu_421_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state24_pp2_stage0_iter0;
wire    ap_block_state26_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] tmp_2_reg_560_pp2_iter1_reg;
wire  signed [31:0] i_1_fu_427_p2;
reg  signed [31:0] i_1_reg_564;
wire  signed [63:0] tmp_7_fu_438_p1;
reg  signed [63:0] tmp_7_reg_574;
reg  signed [31:0] shift_reg_load_reg_584;
wire   [31:0] tmp_8_fu_443_p2;
reg   [31:0] tmp_8_reg_589;
wire   [31:0] acc_2_fu_448_p2;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] x_user_V_tmp_reg_599;
reg   [0:0] x_last_V_tmp_reg_604;
wire   [31:0] tmp_3_fu_466_p2;
reg   [31:0] tmp_3_reg_609;
wire   [31:0] acc_1_fu_472_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
wire    ap_CS_fsm_state19;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state23;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state24;
wire    ap_block_pp2_stage1_subdone;
reg   [29:0] ap_phi_mux_indvar1_phi_fu_272_p4;
reg  signed [31:0] ap_phi_mux_i1_phi_fu_283_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] indvar2_fu_416_p1;
wire  signed [63:0] tmp_6_fu_433_p1;
wire    ap_block_pp2_stage1;
wire   [63:0] tmp_5_fu_326_p1;
wire   [63:0] tmp_9_fu_336_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
wire    ap_CS_fsm_state28;
wire   [31:0] tmp_12_fu_379_p2;
wire   [31:0] tmp_1_fu_385_p2;
wire  signed [31:0] tmp_3_fu_466_p1;
reg    ap_block_state32;
reg   [25:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 y_data_1_sel_rd = 1'b0;
#0 y_data_1_sel_wr = 1'b0;
#0 y_data_1_state = 2'd0;
#0 y_user_V_1_sel_rd = 1'b0;
#0 y_user_V_1_sel_wr = 1'b0;
#0 y_user_V_1_state = 2'd0;
#0 y_last_V_1_sel_rd = 1'b0;
#0 y_last_V_1_sel_wr = 1'b0;
#0 y_last_V_1_state = 2'd0;
#0 x_data_0_sel_rd = 1'b0;
#0 x_data_0_sel_wr = 1'b0;
#0 x_data_0_state = 2'd0;
#0 x_user_V_0_sel_rd = 1'b0;
#0 x_user_V_0_sel_wr = 1'b0;
#0 x_user_V_0_state = 2'd0;
#0 x_last_V_0_sel_rd = 1'b0;
#0 x_last_V_0_sel_wr = 1'b0;
#0 x_last_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
end

x_order_fir_coef #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
coef_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(coef_address0),
    .ce0(coef_ce0),
    .we0(coef_we0),
    .d0(gmem_addr_1_read_reg_555),
    .q0(coef_q0)
);

x_order_fir_coef #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

x_order_fir_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
x_order_fir_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .coe(coe),
    .ctrl(ctrl)
);

x_order_fir_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
x_order_fir_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_data_0_sel_rd <= 1'b0;
    end else begin
        if (((x_data_0_ack_out == 1'b1) & (x_data_0_vld_out == 1'b1))) begin
            x_data_0_sel_rd <= ~x_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_data_0_sel_wr <= 1'b0;
    end else begin
        if (((x_data_0_ack_in == 1'b1) & (x_data_0_vld_in == 1'b1))) begin
            x_data_0_sel_wr <= ~x_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_data_0_state <= 2'd0;
    end else begin
        if ((((x_data_0_vld_in == 1'b0) & (x_data_0_state == 2'd2)) | ((x_data_0_vld_in == 1'b0) & (x_data_0_ack_out == 1'b1) & (x_data_0_state == 2'd3)))) begin
            x_data_0_state <= 2'd2;
        end else if ((((x_data_0_ack_out == 1'b0) & (x_data_0_state == 2'd1)) | ((x_data_0_ack_out == 1'b0) & (x_data_0_vld_in == 1'b1) & (x_data_0_state == 2'd3)))) begin
            x_data_0_state <= 2'd1;
        end else if (((~((x_data_0_vld_in == 1'b0) & (x_data_0_ack_out == 1'b1)) & ~((x_data_0_ack_out == 1'b0) & (x_data_0_vld_in == 1'b1)) & (x_data_0_state == 2'd3)) | ((x_data_0_ack_out == 1'b1) & (x_data_0_state == 2'd1)) | ((x_data_0_vld_in == 1'b1) & (x_data_0_state == 2'd2)))) begin
            x_data_0_state <= 2'd3;
        end else begin
            x_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((x_last_V_0_ack_out == 1'b1) & (x_last_V_0_vld_out == 1'b1))) begin
            x_last_V_0_sel_rd <= ~x_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((x_last_V_0_ack_in == 1'b1) & (x_last_V_0_vld_in == 1'b1))) begin
            x_last_V_0_sel_wr <= ~x_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_last_V_0_state <= 2'd0;
    end else begin
        if ((((x_last_V_0_vld_in == 1'b0) & (x_last_V_0_state == 2'd2)) | ((x_last_V_0_vld_in == 1'b0) & (x_last_V_0_ack_out == 1'b1) & (x_last_V_0_state == 2'd3)))) begin
            x_last_V_0_state <= 2'd2;
        end else if ((((x_last_V_0_ack_out == 1'b0) & (x_last_V_0_state == 2'd1)) | ((x_last_V_0_ack_out == 1'b0) & (x_last_V_0_vld_in == 1'b1) & (x_last_V_0_state == 2'd3)))) begin
            x_last_V_0_state <= 2'd1;
        end else if (((~((x_last_V_0_vld_in == 1'b0) & (x_last_V_0_ack_out == 1'b1)) & ~((x_last_V_0_ack_out == 1'b0) & (x_last_V_0_vld_in == 1'b1)) & (x_last_V_0_state == 2'd3)) | ((x_last_V_0_ack_out == 1'b1) & (x_last_V_0_state == 2'd1)) | ((x_last_V_0_vld_in == 1'b1) & (x_last_V_0_state == 2'd2)))) begin
            x_last_V_0_state <= 2'd3;
        end else begin
            x_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((x_user_V_0_ack_out == 1'b1) & (x_user_V_0_vld_out == 1'b1))) begin
            x_user_V_0_sel_rd <= ~x_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((x_user_V_0_ack_in == 1'b1) & (x_user_V_0_vld_in == 1'b1))) begin
            x_user_V_0_sel_wr <= ~x_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        x_user_V_0_state <= 2'd0;
    end else begin
        if ((((x_user_V_0_vld_in == 1'b0) & (x_user_V_0_state == 2'd2)) | ((x_user_V_0_vld_in == 1'b0) & (x_user_V_0_ack_out == 1'b1) & (x_user_V_0_state == 2'd3)))) begin
            x_user_V_0_state <= 2'd2;
        end else if ((((x_user_V_0_ack_out == 1'b0) & (x_user_V_0_state == 2'd1)) | ((x_user_V_0_ack_out == 1'b0) & (x_user_V_0_vld_in == 1'b1) & (x_user_V_0_state == 2'd3)))) begin
            x_user_V_0_state <= 2'd1;
        end else if (((~((x_user_V_0_vld_in == 1'b0) & (x_user_V_0_ack_out == 1'b1)) & ~((x_user_V_0_ack_out == 1'b0) & (x_user_V_0_vld_in == 1'b1)) & (x_user_V_0_state == 2'd3)) | ((x_user_V_0_ack_out == 1'b1) & (x_user_V_0_state == 2'd1)) | ((x_user_V_0_vld_in == 1'b1) & (x_user_V_0_state == 2'd2)))) begin
            x_user_V_0_state <= 2'd3;
        end else begin
            x_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_data_1_sel_rd <= 1'b0;
    end else begin
        if (((y_data_1_ack_out == 1'b1) & (y_data_1_vld_out == 1'b1))) begin
            y_data_1_sel_rd <= ~y_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_data_1_sel_wr <= 1'b0;
    end else begin
        if (((y_data_1_ack_in == 1'b1) & (y_data_1_vld_in == 1'b1))) begin
            y_data_1_sel_wr <= ~y_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_data_1_state <= 2'd0;
    end else begin
        if ((((y_data_1_vld_in == 1'b0) & (y_data_1_state == 2'd2)) | ((y_data_1_vld_in == 1'b0) & (y_data_1_ack_out == 1'b1) & (y_data_1_state == 2'd3)))) begin
            y_data_1_state <= 2'd2;
        end else if ((((y_data_1_ack_out == 1'b0) & (y_data_1_state == 2'd1)) | ((y_data_1_ack_out == 1'b0) & (y_data_1_vld_in == 1'b1) & (y_data_1_state == 2'd3)))) begin
            y_data_1_state <= 2'd1;
        end else if (((~((y_data_1_vld_in == 1'b0) & (y_data_1_ack_out == 1'b1)) & ~((y_data_1_ack_out == 1'b0) & (y_data_1_vld_in == 1'b1)) & (y_data_1_state == 2'd3)) | ((y_data_1_ack_out == 1'b1) & (y_data_1_state == 2'd1)) | ((y_data_1_vld_in == 1'b1) & (y_data_1_state == 2'd2)))) begin
            y_data_1_state <= 2'd3;
        end else begin
            y_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((y_last_V_1_ack_out == 1'b1) & (y_last_V_1_vld_out == 1'b1))) begin
            y_last_V_1_sel_rd <= ~y_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((y_last_V_1_ack_in == 1'b1) & (y_last_V_1_vld_in == 1'b1))) begin
            y_last_V_1_sel_wr <= ~y_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_last_V_1_state <= 2'd0;
    end else begin
        if ((((y_last_V_1_vld_in == 1'b0) & (y_last_V_1_state == 2'd2)) | ((y_last_V_1_vld_in == 1'b0) & (y_last_V_1_ack_out == 1'b1) & (y_last_V_1_state == 2'd3)))) begin
            y_last_V_1_state <= 2'd2;
        end else if ((((y_last_V_1_ack_out == 1'b0) & (y_last_V_1_state == 2'd1)) | ((y_last_V_1_ack_out == 1'b0) & (y_last_V_1_vld_in == 1'b1) & (y_last_V_1_state == 2'd3)))) begin
            y_last_V_1_state <= 2'd1;
        end else if (((~((y_last_V_1_vld_in == 1'b0) & (y_last_V_1_ack_out == 1'b1)) & ~((y_last_V_1_ack_out == 1'b0) & (y_last_V_1_vld_in == 1'b1)) & (y_last_V_1_state == 2'd3)) | ((y_last_V_1_ack_out == 1'b1) & (y_last_V_1_state == 2'd1)) | ((y_last_V_1_vld_in == 1'b1) & (y_last_V_1_state == 2'd2)))) begin
            y_last_V_1_state <= 2'd3;
        end else begin
            y_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((y_user_V_1_ack_out == 1'b1) & (y_user_V_1_vld_out == 1'b1))) begin
            y_user_V_1_sel_rd <= ~y_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((y_user_V_1_ack_in == 1'b1) & (y_user_V_1_vld_in == 1'b1))) begin
            y_user_V_1_sel_wr <= ~y_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        y_user_V_1_state <= 2'd0;
    end else begin
        if ((((y_user_V_1_vld_in == 1'b0) & (y_user_V_1_state == 2'd2)) | ((y_user_V_1_vld_in == 1'b0) & (y_user_V_1_ack_out == 1'b1) & (y_user_V_1_state == 2'd3)))) begin
            y_user_V_1_state <= 2'd2;
        end else if ((((y_user_V_1_ack_out == 1'b0) & (y_user_V_1_state == 2'd1)) | ((y_user_V_1_ack_out == 1'b0) & (y_user_V_1_vld_in == 1'b1) & (y_user_V_1_state == 2'd3)))) begin
            y_user_V_1_state <= 2'd1;
        end else if (((~((y_user_V_1_vld_in == 1'b0) & (y_user_V_1_ack_out == 1'b1)) & ~((y_user_V_1_ack_out == 1'b0) & (y_user_V_1_vld_in == 1'b1)) & (y_user_V_1_state == 2'd3)) | ((y_user_V_1_ack_out == 1'b1) & (y_user_V_1_state == 2'd1)) | ((y_user_V_1_vld_in == 1'b1) & (y_user_V_1_state == 2'd2)))) begin
            y_user_V_1_state <= 2'd3;
        end else begin
            y_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (tmp_2_reg_560_pp2_iter1_reg == 1'd0))) begin
        acc_reg_290 <= acc_2_fu_448_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        acc_reg_290 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_2_reg_560 == 1'd0))) begin
        i1_reg_280 <= i_1_reg_564;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i1_reg_280 <= i_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_546 == 1'd0))) begin
        indvar1_reg_268 <= indvar_next1_reg_550;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        indvar1_reg_268 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_345_p2 == 1'd0))) begin
        indvar_reg_257 <= indvar_next_fu_351_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_257 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        coe1_reg_483 <= {{coe[31:2]}};
        ctrl3_reg_478 <= {{ctrl[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond1_reg_546 <= exitcond1_fu_405_p2;
        exitcond1_reg_546_pp1_iter1_reg <= exitcond1_reg_546;
        indvar1_reg_268_pp1_iter1_reg <= indvar1_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_500 <= exitcond_fu_345_p2;
        exitcond_reg_500_pp0_iter1_reg <= exitcond_reg_500;
        tmp_10_reg_509_pp0_iter1_reg <= tmp_10_reg_509;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_500 == 1'd0))) begin
        fir_ctrl_0_reg_515 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_546 == 1'd0))) begin
        gmem_addr_1_read_reg_555 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        gmem_addr_1_reg_494[29 : 0] <= tmp_9_fu_336_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_2_fu_421_p2 == 1'd0))) begin
        i_1_reg_564 <= i_1_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_500_pp0_iter1_reg == 1'd0))) begin
        i_reg_233 <= fir_ctrl_1_1_fu_361_p3;
        reload_reg_245 <= reload_1_fu_367_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_next1_reg_550 <= indvar_next1_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_fu_373_p2 == 1'd0))) begin
        p_add7_i32_shr_reg_535 <= {{tmp_1_fu_385_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (tmp_2_reg_560 == 1'd0)))) begin
        reg_302 <= coef_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (tmp_2_reg_560 == 1'd0))) begin
        shift_reg_load_reg_584 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_345_p2 == 1'd0))) begin
        tmp_10_reg_509 <= tmp_10_fu_357_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_2_reg_560 <= tmp_2_fu_421_p2;
        tmp_2_reg_560_pp2_iter1_reg <= tmp_2_reg_560;
    end
end

always @ (posedge ap_clk) begin
    if (((x_data_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        tmp_3_reg_609 <= tmp_3_fu_466_p2;
        x_last_V_tmp_reg_604 <= x_last_V_0_data_out;
        x_user_V_tmp_reg_599 <= x_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_2_fu_421_p2 == 1'd0))) begin
        tmp_7_reg_574 <= tmp_7_fu_438_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_2_reg_560 == 1'd0))) begin
        tmp_8_reg_589 <= tmp_8_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((x_data_0_load_A == 1'b1)) begin
        x_data_0_payload_A <= x_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((x_data_0_load_B == 1'b1)) begin
        x_data_0_payload_B <= x_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((x_last_V_0_load_A == 1'b1)) begin
        x_last_V_0_payload_A <= x_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((x_last_V_0_load_B == 1'b1)) begin
        x_last_V_0_payload_B <= x_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((x_user_V_0_load_A == 1'b1)) begin
        x_user_V_0_payload_A <= x_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((x_user_V_0_load_B == 1'b1)) begin
        x_user_V_0_payload_B <= x_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((y_data_1_load_A == 1'b1)) begin
        y_data_1_payload_A <= acc_1_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((y_data_1_load_B == 1'b1)) begin
        y_data_1_payload_B <= acc_1_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((y_last_V_1_load_A == 1'b1)) begin
        y_last_V_1_payload_A <= x_last_V_tmp_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if ((y_last_V_1_load_B == 1'b1)) begin
        y_last_V_1_payload_B <= x_last_V_tmp_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if ((y_user_V_1_load_A == 1'b1)) begin
        y_user_V_1_payload_A <= x_user_V_tmp_reg_599;
    end
end

always @ (posedge ap_clk) begin
    if ((y_user_V_1_load_B == 1'b1)) begin
        y_user_V_1_payload_B <= x_user_V_tmp_reg_599;
    end
end

always @ (*) begin
    if ((exitcond_fu_345_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_405_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_2_fu_421_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((~((y_last_V_1_ack_in == 1'b0) | (y_user_V_1_ack_in == 1'b0) | (y_data_1_ack_in == 1'b0)) & (y_last_V_1_state[1'd0] == 1'b0) & (y_user_V_1_state[1'd0] == 1'b0) & (y_data_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_2_reg_560 == 1'd0))) begin
        ap_phi_mux_i1_phi_fu_283_p4 = i_1_reg_564;
    end else begin
        ap_phi_mux_i1_phi_fu_283_p4 = i1_reg_280;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_546 == 1'd0))) begin
        ap_phi_mux_indvar1_phi_fu_272_p4 = indvar_next1_reg_550;
    end else begin
        ap_phi_mux_indvar1_phi_fu_272_p4 = indvar1_reg_268;
    end
end

always @ (*) begin
    if ((~((y_last_V_1_ack_in == 1'b0) | (y_user_V_1_ack_in == 1'b0) | (y_data_1_ack_in == 1'b0)) & (y_last_V_1_state[1'd0] == 1'b0) & (y_user_V_1_state[1'd0] == 1'b0) & (y_data_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        coef_address0 = 10'd0;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        coef_address0 = tmp_7_fu_438_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        coef_address0 = indvar2_fu_416_p1;
    end else begin
        coef_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        coef_ce0 = 1'b1;
    end else begin
        coef_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond1_reg_546_pp1_iter1_reg == 1'd0))) begin
        coef_we0 = 1'b1;
    end else begin
        coef_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            gmem_ARADDR = gmem_addr_1_reg_494;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARADDR = tmp_5_fu_326_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            gmem_ARLEN = tmp_s_fu_401_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARLEN = 32'd2;
        end else begin
            gmem_ARLEN = 'bx;
        end
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_546 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_500 == 1'd0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_546 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_500 == 1'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        shift_reg_address0 = 10'd0;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        shift_reg_address0 = tmp_7_reg_574;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        shift_reg_address0 = tmp_6_fu_433_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((x_data_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30)))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        shift_reg_d0 = x_data_0_data_out;
    end else if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        shift_reg_d0 = shift_reg_q0;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage1_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (tmp_2_reg_560 == 1'd0)) | ((x_data_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        x_TDATA_blk_n = x_data_0_state[1'd0];
    end else begin
        x_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((x_data_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        x_data_0_ack_out = 1'b1;
    end else begin
        x_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((x_data_0_sel == 1'b1)) begin
        x_data_0_data_out = x_data_0_payload_B;
    end else begin
        x_data_0_data_out = x_data_0_payload_A;
    end
end

always @ (*) begin
    if (((x_data_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        x_last_V_0_ack_out = 1'b1;
    end else begin
        x_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((x_last_V_0_sel == 1'b1)) begin
        x_last_V_0_data_out = x_last_V_0_payload_B;
    end else begin
        x_last_V_0_data_out = x_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((x_data_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        x_user_V_0_ack_out = 1'b1;
    end else begin
        x_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((x_user_V_0_sel == 1'b1)) begin
        x_user_V_0_data_out = x_user_V_0_payload_B;
    end else begin
        x_user_V_0_data_out = x_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        y_TDATA_blk_n = y_data_1_state[1'd1];
    end else begin
        y_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((y_data_1_sel == 1'b1)) begin
        y_data_1_data_out = y_data_1_payload_B;
    end else begin
        y_data_1_data_out = y_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) & (y_data_1_ack_in == 1'b1))) begin
        y_data_1_vld_in = 1'b1;
    end else begin
        y_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((y_last_V_1_sel == 1'b1)) begin
        y_last_V_1_data_out = y_last_V_1_payload_B;
    end else begin
        y_last_V_1_data_out = y_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) & (y_data_1_ack_in == 1'b1))) begin
        y_last_V_1_vld_in = 1'b1;
    end else begin
        y_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((y_user_V_1_sel == 1'b1)) begin
        y_user_V_1_data_out = y_user_V_1_payload_B;
    end else begin
        y_user_V_1_data_out = y_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) & (y_data_1_ack_in == 1'b1))) begin
        y_user_V_1_vld_in = 1'b1;
    end else begin
        y_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_345_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_345_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (tmp_fu_373_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond1_fu_405_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond1_fu_405_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_2_fu_421_p2 == 1'd1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (tmp_2_fu_421_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((x_data_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (y_data_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if ((~((y_last_V_1_ack_in == 1'b0) | (y_user_V_1_ack_in == 1'b0) | (y_data_1_ack_in == 1'b0)) & (y_last_V_1_state[1'd0] == 1'b0) & (y_user_V_1_state[1'd0] == 1'b0) & (y_data_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_472_p2 = (tmp_3_reg_609 + acc_reg_290);

assign acc_2_fu_448_p2 = (tmp_8_reg_589 + acc_reg_290);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_500 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_500 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond1_reg_546 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond1_reg_546 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_reg_500 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond1_reg_546 == 1'd0));
end

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32 = ((y_last_V_1_ack_in == 1'b0) | (y_user_V_1_ack_in == 1'b0) | (y_data_1_ack_in == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_405_p2 = ((ap_phi_mux_indvar1_phi_fu_272_p4 == p_add7_i32_shr_reg_535) ? 1'b1 : 1'b0);

assign exitcond_fu_345_p2 = ((indvar_reg_257 == 2'd2) ? 1'b1 : 1'b0);

assign fir_ctrl_1_1_fu_361_p3 = ((tmp_10_reg_509_pp0_iter1_reg[0:0] === 1'b1) ? fir_ctrl_0_reg_515 : i_reg_233);

assign i_1_fu_427_p2 = ($signed(ap_phi_mux_i1_phi_fu_283_p4) + $signed(32'd4294967295));

assign indvar2_fu_416_p1 = indvar1_reg_268_pp1_iter1_reg;

assign indvar_next1_fu_410_p2 = (ap_phi_mux_indvar1_phi_fu_272_p4 + 30'd1);

assign indvar_next_fu_351_p2 = (indvar_reg_257 + 2'd1);

assign reload_1_fu_367_p3 = ((tmp_10_reg_509_pp0_iter1_reg[0:0] === 1'b1) ? reload_reg_245 : fir_ctrl_0_reg_515);

assign tmp_10_fu_357_p1 = indvar_reg_257[0:0];

assign tmp_12_fu_379_p2 = i_reg_233 << 32'd2;

assign tmp_1_fu_385_p2 = (32'd4 + tmp_12_fu_379_p2);

assign tmp_2_fu_421_p2 = ((ap_phi_mux_i1_phi_fu_283_p4 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_466_p1 = x_data_0_data_out;

assign tmp_3_fu_466_p2 = ($signed(reg_302) * $signed(tmp_3_fu_466_p1));

assign tmp_5_fu_326_p1 = ctrl3_reg_478;

assign tmp_6_fu_433_p1 = i_1_fu_427_p2;

assign tmp_7_fu_438_p1 = ap_phi_mux_i1_phi_fu_283_p4;

assign tmp_8_fu_443_p2 = ($signed(reg_302) * $signed(shift_reg_load_reg_584));

assign tmp_9_fu_336_p1 = coe1_reg_483;

assign tmp_fu_373_p2 = ((reload_reg_245 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_401_p1 = p_add7_i32_shr_reg_535;

assign x_TREADY = x_last_V_0_state[1'd1];

assign x_data_0_ack_in = x_data_0_state[1'd1];

assign x_data_0_load_A = (x_data_0_state_cmp_full & ~x_data_0_sel_wr);

assign x_data_0_load_B = (x_data_0_state_cmp_full & x_data_0_sel_wr);

assign x_data_0_sel = x_data_0_sel_rd;

assign x_data_0_state_cmp_full = ((x_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign x_data_0_vld_in = x_TVALID;

assign x_data_0_vld_out = x_data_0_state[1'd0];

assign x_last_V_0_ack_in = x_last_V_0_state[1'd1];

assign x_last_V_0_load_A = (x_last_V_0_state_cmp_full & ~x_last_V_0_sel_wr);

assign x_last_V_0_load_B = (x_last_V_0_state_cmp_full & x_last_V_0_sel_wr);

assign x_last_V_0_sel = x_last_V_0_sel_rd;

assign x_last_V_0_state_cmp_full = ((x_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign x_last_V_0_vld_in = x_TVALID;

assign x_last_V_0_vld_out = x_last_V_0_state[1'd0];

assign x_user_V_0_ack_in = x_user_V_0_state[1'd1];

assign x_user_V_0_load_A = (x_user_V_0_state_cmp_full & ~x_user_V_0_sel_wr);

assign x_user_V_0_load_B = (x_user_V_0_state_cmp_full & x_user_V_0_sel_wr);

assign x_user_V_0_sel = x_user_V_0_sel_rd;

assign x_user_V_0_state_cmp_full = ((x_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign x_user_V_0_vld_in = x_TVALID;

assign x_user_V_0_vld_out = x_user_V_0_state[1'd0];

assign y_TDATA = y_data_1_data_out;

assign y_TLAST = y_last_V_1_data_out;

assign y_TUSER = y_user_V_1_data_out;

assign y_TVALID = y_last_V_1_state[1'd0];

assign y_data_1_ack_in = y_data_1_state[1'd1];

assign y_data_1_ack_out = y_TREADY;

assign y_data_1_load_A = (y_data_1_state_cmp_full & ~y_data_1_sel_wr);

assign y_data_1_load_B = (y_data_1_state_cmp_full & y_data_1_sel_wr);

assign y_data_1_sel = y_data_1_sel_rd;

assign y_data_1_state_cmp_full = ((y_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign y_data_1_vld_out = y_data_1_state[1'd0];

assign y_last_V_1_ack_in = y_last_V_1_state[1'd1];

assign y_last_V_1_ack_out = y_TREADY;

assign y_last_V_1_load_A = (y_last_V_1_state_cmp_full & ~y_last_V_1_sel_wr);

assign y_last_V_1_load_B = (y_last_V_1_state_cmp_full & y_last_V_1_sel_wr);

assign y_last_V_1_sel = y_last_V_1_sel_rd;

assign y_last_V_1_state_cmp_full = ((y_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign y_last_V_1_vld_out = y_last_V_1_state[1'd0];

assign y_user_V_1_ack_in = y_user_V_1_state[1'd1];

assign y_user_V_1_ack_out = y_TREADY;

assign y_user_V_1_load_A = (y_user_V_1_state_cmp_full & ~y_user_V_1_sel_wr);

assign y_user_V_1_load_B = (y_user_V_1_state_cmp_full & y_user_V_1_sel_wr);

assign y_user_V_1_sel = y_user_V_1_sel_rd;

assign y_user_V_1_state_cmp_full = ((y_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign y_user_V_1_vld_out = y_user_V_1_state[1'd0];

always @ (posedge ap_clk) begin
    gmem_addr_1_reg_494[31:30] <= 2'b00;
end

endmodule //x_order_fir
